// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.os.Build;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import eu.ginlo_apps.ginlo.context.SimsMeApplication;
import eu.ginlo_apps.ginlo.exception.LocalizedException;
import eu.ginlo_apps.ginlo.greendao.AbstractSecureModel;
import eu.ginlo_apps.ginlo.greendao.GreenDAOSecurityLayer;
import eu.ginlo_apps.ginlo.util.StringUtil;
import java.util.Date;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table ACCOUNT.
 */
public class Account
        extends AbstractSecureModel
        implements java.io.Serializable {

    /**
     * No Account. Only Start Pages should be reachable
     */
    public static final int ACCOUNT_STATE_NO_ACCOUNT = 0;

    /**
     * User requested for confirmation code, but has not entered it, yet
     */
    public static final int ACCOUNT_STATE_NOT_CONFIRMED = 1;

    /**
     * User has confirmed his account but not set a name and profile picture
     */
    public static final int ACCOUNT_STATE_CONFIRMED = 2;

    /**
     * user has confirmed account and set a name. the app should be fully
     * operational
     */
    public static final int ACCOUNT_STATE_FULL = 3;

    public static final int ACCOUNT_STATE_VALID_CONFIRM_CODE = 4;

    public static final int ACCOUNT_STATE_AUTOMATIC_MDM_PROGRESS = 5;

    private Long mId;

    private String mPhoneNumber;

    private String mDeviceGuid;

    private String mAccountGuid;

    private String mName;

    private String mCountry;

    private byte[] mEncryptedData;

    private byte[] mIv;

    /**
     * mState off account. e.g. "confirmed"
     */
    private int mState;

    private String mAccountID;

    // KEEP FIELDS - put your custom fields here

    // KEEP FIELDS END

    public Account() {
    }

    public Account(Long id) {
        this.mId = id;
    }

    public Account(Long id,
                   String phoneNumber,
                   String deviceGuid,
                   String accountGuid,
                   String name,
                   String country,
                   byte[] encryptedData,
                   byte[] iv,
                   Integer state,
                   String accountID) {
        this.mId = id;
        this.mPhoneNumber = phoneNumber;
        this.mDeviceGuid = deviceGuid;
        this.mAccountGuid = accountGuid;
        this.mName = name;
        this.mCountry = country;
        if (encryptedData != null) {
            this.mEncryptedData = encryptedData.clone();
        }
        if (iv != null) {
            this.mIv = iv.clone();
        }
        if (state == null) {
            this.mState = Account.ACCOUNT_STATE_NO_ACCOUNT;
        } else {
            this.mState = state;
        }
        this.mAccountID = accountID;
    }

    // KEEP METHODS - put your custom methods here

    /**
     * setzt ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public boolean getCustomBooleanAttribute(@NonNull final String attributeName)
            throws LocalizedException {
        synchronized (this) {
            return StringUtil.isEqual((String) GreenDAOSecurityLayer.getInstance().get(this, attributeName), "true");
        }
    }

    /**
     * liefert ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setCustomBooleanAttribute(@NonNull final String attributeName, boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, attributeName, value ? "true" : "false");
        }
    }

    /**
     * setzt ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public String getCustomStringAttribute(@NonNull final String attributeName)
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, attributeName);
        }
    }

    /**
     * liefert ein custom attribut - fuer withelabel oder ba
     *
     * @param value value oder null. Wenn Null wird das Attribute geloescht
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setCustomStringAttribute(@NonNull final String attributeName, @Nullable String value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, attributeName, value);
        }
    }

    /**
     * setzt ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public Integer getCustomIntegerAttribute(@NonNull final String attributeName, final Integer defaultValue)
            throws LocalizedException {
        synchronized (this) {
            final Integer result = (Integer) GreenDAOSecurityLayer.getInstance().get(this, attributeName);
            if (result == null) {
                return defaultValue;
            } else {
                return result;
            }
        }
    }

    /**
     * liefert ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setCustomIntegerAttribute(@NonNull final String attributeName, @NonNull Integer value)
            throws LocalizedException {
        synchronized (this) {
            if (value != null) {
                GreenDAOSecurityLayer.getInstance().set(this, attributeName, value);
            }
        }
    }

    /**
     * setzt ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public Long getCustomLongAttribute(@NonNull final String attributeName, final Long defaultValue)
            throws LocalizedException {
        synchronized (this) {
            final Long result = (Long) GreenDAOSecurityLayer.getInstance().get(this, attributeName);
            if (result == null) {
                return defaultValue;
            } else {
                return result;
            }
        }
    }

    /**
     * liefert ein custom attribut - fuer withelabel oder ba
     *
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setCustomLongAttribute(@NonNull final String attributeName, final @NonNull Long value)
            throws LocalizedException {
        synchronized (this) {
            if (value != null) {
                GreenDAOSecurityLayer.getInstance().set(this, attributeName, value);
            }
        }
    }

    /**
     * custom attribut auf null setzen
     *
     * @param attributeName name
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void resetCustomLongAttribute(@NonNull final String attributeName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, attributeName, null);
        }
    }

    public String getPasstoken()
            throws LocalizedException {
        synchronized (this) {
            String passToken = null;

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                passToken = SimsMeApplication.getInstance().getSecurePreferences().getAccountPassToken();
            }

            if (passToken != null) {
                return passToken;
            }

            passToken = (String) GreenDAOSecurityLayer.getInstance().get(this, "passtoken");

            // TODO: Remove later later later when everyone did migrate to new storage
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && passToken != null) {
                SimsMeApplication.getInstance().getSecurePreferences().setAccountPassToken(passToken);
            }

            return passToken;
        }
    }

    public void setPasstoken(String passToken)
            throws LocalizedException {
        synchronized (this) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                if (passToken != null) {
                    SimsMeApplication.getInstance().getSecurePreferences().setAccountPassToken(passToken);
                }
            } else {
                GreenDAOSecurityLayer.getInstance().set(this, "passtoken", passToken);
            }
        }
    }

    /**
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    @Deprecated
    public String getStatusText()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "statusText");
        }
    }

    /**
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    @Deprecated
    public void setStatusText(String statusText)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "statusText", statusText);
        }
    }

    /**
     * Mit diesem AES Key werden die Account Informationen(Nickname,Statustext und Profilbild) verschl√ºsselt, bevor sie an den Server versendet werden.
     * @return String
     * @throws LocalizedException
     */
    public String getAccountInfosAesKey()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "accountInfoAesKey");
        }
    }

    /**
     * Aes Key setzen
     *
     * @param aesKey Base64 AES Key String
     * @throws LocalizedException
     */
    public void setAccountInfosAesKey(String aesKey)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "accountInfoAesKey", aesKey);
        }
    }

    /**
     * Return license expiration date for account
     * @return Long
     * @throws LocalizedException
     */
    public Long getLicenceDate()
            throws LocalizedException {
        synchronized (this) {
            return (Long) GreenDAOSecurityLayer.getInstance().get(this, "licenceDate");
        }
    }

    /**
     * Set license expiration date for account
     *
     * @param licenceDate licenceDate
     * @throws LocalizedException
     */
    public void setLicenceDate(Long licenceDate)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "licenceDate", licenceDate);
        }
    }

    public boolean isAutorenewingLicense()
            throws LocalizedException {
        synchronized (this) {
            final String auto = (String) GreenDAOSecurityLayer.getInstance().get(this, "Autorenewinglicence");

            return auto != null && !auto.equalsIgnoreCase("false");
        }
    }

    public void setAutorenewingLicense(boolean autorenewing)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "Autorenewinglicence", autorenewing ? "true" : "false");
        }
    }

    /**
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public boolean getHasLicence()
            throws LocalizedException {
        synchronized (this) {
            final Long licenceDate = (Long) GreenDAOSecurityLayer.getInstance().get(this, "licenceDate");

            return licenceDate != null && licenceDate > new Date().getTime();
        }
    }

    public String getCountryCode() {
        synchronized (this) {
            if (mPhoneNumber == null) {
                return null;
            }

            String[] validCountryCodes = new String[]
                    {
                            "+999",
                            "+49",
                            "+44",
                            "+39",
                            "+34",
                            "+1",
                            "+93",
                            "+20",
                            "+358",
                            "+355",
                            "+213",
                            "+1",
                            "+1",
                            "+376",
                            "+244",
                            "+1",
                            "+1",
                            "+240",
                            "+54",
                            "+374",
                            "+297",
                            "+247",
                            "+994",
                            "+251",
                            "+61",
                            "+1",
                            "+973",
                            "+880",
                            "+1",
                            "+32",
                            "+501",
                            "+229",
                            "+1",
                            "+975",
                            "+591",
                            "+387",
                            "+267",
                            "+55",
                            "+1",
                            "+673",
                            "+359",
                            "+226",
                            "+257",
                            "+1",
                            "+56",
                            "+86",
                            "+682",
                            "+506",
                            "+45",
                            "+253",
                            "+1",
                            "+1",
                            "+593",
                            "+503",
                            "+291",
                            "+372",
                            "+500",
                            "+298",
                            "+679",
                            "+358",
                            "+691",
                            "+33",
                            "+594",
                            "+689",
                            "+241",
                            "+220",
                            "+995",
                            "+233",
                            "+350",
                            "+1",
                            "+30",
                            "+299",
                            "+590",
                            "+1",
                            "+502",
                            "+224",
                            "+245",
                            "+592",
                            "+509T",
                            "+61",
                            "+504",
                            "+852",
                            "+91",
                            "+62",
                            "+964",
                            "+98",
                            "+353",
                            "+354",
                            "+44",
                            "+972",
                            "+1",
                            "+81",
                            "+967",
                            "+962",
                            "+855",
                            "+237",
                            "+1",
                            "+238",
                            "+7",
                            "+254",
                            "+686",
                            "+672",
                            "+57",
                            "+269",
                            "+242",
                            "+243",
                            "+385",
                            "+53",
                            "+965",
                            "+996",
                            "+856",
                            "+266S",
                            "+371",
                            "+961",
                            "+231",
                            "+218",
                            "+423",
                            "+370",
                            "+352",
                            "+853",
                            "+261",
                            "+265",
                            "+60",
                            "+960",
                            "+223",
                            "+356",
                            "+212",
                            "+692",
                            "+596",
                            "+222",
                            "+230",
                            "+269",
                            "+389",
                            "+52",
                            "+258",
                            "+373",
                            "+377",
                            "+976",
                            "+382",
                            "+1",
                            "+95",
                            "+264",
                            "+674",
                            "+977",
                            "+687",
                            "+64",
                            "+505",
                            "+31",
                            "+599",
                            "+227",
                            "+234",
                            "+683",
                            "+1",
                            "+672",
                            "+47",
                            "+968",
                            "+670",
                            "+43",
                            "+82",
                            "+970",
                            "+680",
                            "+507",
                            "+675",
                            "+595",
                            "+51",
                            "+63",
                            "+649",
                            "+48",
                            "+351",
                            "+1",
                            "+974",
                            "+262",
                            "+250",
                            "+40",
                            "+7",
                            "+677",
                            "+260",
                            "+685",
                            "+378",
                            "+239",
                            "+966",
                            "+46",
                            "+41",
                            "+221",
                            "+381",
                            "+248",
                            "+232",
                            "+65",
                            "+421",
                            "+386",
                            "+47",
                            "+252",
                            "+94",
                            "+1",
                            "+1",
                            "+1",
                            "+508",
                            "+27",
                            "+249",
                            "+500",
                            "+82",
                            "+211",
                            "+597",
                            "+268",
                            "+963",
                            "+992",
                            "+886",
                            "+255",
                            "+66",
                            "+228",
                            "+690",
                            "+676",
                            "+1",
                            "+235",
                            "+420",
                            "+216",
                            "+90",
                            "+993",
                            "+1",
                            "+688",
                            "+256",
                            "+380",
                            "+36",
                            "+598",
                            "+998",
                            "+678",
                            "+379",
                            "+58",
                            "+971",
                            "+84",
                            "+681",
                            "+672",
                            "+375",
                            "+212",
                            "+236",
                            "+263",
                            "+357",
                            "+92",
                            "+290"
                    };

            for (int i = 0; i < validCountryCodes.length; i++) {
                if (mPhoneNumber.startsWith(validCountryCodes[i])) {
                    return validCountryCodes[i];
                }
            }
            return null;
        }
    }

    public Long getId() {
        synchronized (this) {
            return mId;
        }
    }

    public void setId(Long id) {
        synchronized (this) {
            this.mId = id;
        }
    }

    public String getAccountGuid() {
        synchronized (this) {
            return mAccountGuid;
        }
    }

    public void setAccountGuid(String accountGuid) {
        synchronized (this) {
            this.mAccountGuid = accountGuid;
        }
    }

    @Deprecated
    public String getPhoneNumber() {
        synchronized (this) {
            return mPhoneNumber;
        }
    }

    @Deprecated
    public void setPhoneNumber(String phoneNumber) {
        synchronized (this) {
            this.mPhoneNumber = phoneNumber;
        }
    }

    public String getDeviceGuid() {
        synchronized (this) {
            return mDeviceGuid;
        }
    }

    public void setDeviceGuid(String deviceGuid) {
        synchronized (this) {
            this.mDeviceGuid = deviceGuid;
        }
    }

    @Deprecated
    public String getName() {
        synchronized (this) {
            return mName;
        }
    }

    @Deprecated
    public void setName(String name) {
        synchronized (this) {
            this.mName = name;
        }
    }

    public String getCountry() {
        synchronized (this) {
            return mCountry;
        }
    }

    public void setCountry(String country) {
        synchronized (this) {
            this.mCountry = country;
        }
    }

    public byte[] getEncryptedData() {
        synchronized (this) {
            if (mEncryptedData != null) {
                return mEncryptedData.clone();
            } else {
                return null;
            }
        }
    }

    public void setEncryptedData(byte[] encryptedData) {
        synchronized (this) {
            if (encryptedData != null) {
                this.mEncryptedData = encryptedData.clone();
            }
        }
    }

    public byte[] getIv() {
        synchronized (this) {
            if (mIv != null) {
                return mIv.clone();
            } else {
                return null;
            }
        }
    }

    public void setIv(byte[] iv) {
        synchronized (this) {
            if (iv != null) {
                this.mIv = iv.clone();
            }
        }
    }

    public Integer getState() {
        return mState;
    }

    public void setState(Integer state) {
        this.mState = state;
    }

    public String getAccountID() {
        return mAccountID;
    }

    public void setAccountID(String accountID) {
        this.mAccountID = accountID;
    }

    /**
     * get publickey
     *
     * @return publickey
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public String getPublicKey() throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "publicKey");
        }
    }

    /**
     * setPublicKey
     *
     * @param publicKey publicKey
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setPublicKey(String publicKey) throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "publicKey", publicKey);
        }
    }

    /**
     * getPrivateKey
     *
     * @return privateKey
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public String getPrivateKey()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "privateKey");
        }
    }

    /**
     * setPrivateKey
     *
     * @param privateKey privateKey
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setPrivateKey(String privateKey)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "privateKey", privateKey);
        }
    }

    /**
     * Dieses Passtoken wird beim Einspielen des Backups benoetigt.
     *
     * @return Passtoken
     */
    public String getBackupPasstoken()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "backupPasstoken");
        }
    }

    /**
     * @param passtoken
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setBackupPasstoken(String passtoken)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "backupPasstoken", passtoken);
        }
    }

    /**
     * getAllServerAccountIDs
     *
     * @return allServerAccounts
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public String getAllServerAccountIDs()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "allServerAccounts");
        }
    }

    /**
     * setAllServerAccountGuids
     *
     * @param idsAsCommaString allServerAccounts
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setAllServerAccountIDs(String idsAsCommaString)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "allServerAccounts", idsAsCommaString);
        }
    }

    /**
     * getManagementCompany
     *
     * @return managementCompany
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    @Nullable
    public JsonObject getManagementCompany()
            throws LocalizedException {
        synchronized (this) {
            final String jsonObjectString = (String) GreenDAOSecurityLayer.getInstance().get(this, "managementCompany");

            if (jsonObjectString != null) {
                final JsonParser parser = new JsonParser();
                return parser.parse(jsonObjectString).getAsJsonObject();
            }

            return null;
        }
    }

    /**
     * setManagementCompany
     *
     * @param company managementCompany
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public void setManagementCompany(JsonObject company)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "managementCompany", company.toString());
        }
    }

    // KEEP METHODS END
}
