// Copyright (c) 2020-2022 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import androidx.annotation.NonNull;

import eu.ginlo_apps.ginlo.BuildConfig;
import eu.ginlo_apps.ginlo.exception.LocalizedException;
import eu.ginlo_apps.ginlo.greendao.AbstractSecureModel;
import eu.ginlo_apps.ginlo.greendao.GreenDAOSecurityLayer;
import eu.ginlo_apps.ginlo.model.constant.AppConstants;
import eu.ginlo_apps.ginlo.util.DateUtil;
import eu.ginlo_apps.ginlo.view.CameraView;

import java.util.Date;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table PREFERENCE.
 */
public class Preference
        extends AbstractSecureModel
        implements java.io.Serializable {

    // KEEP FIELDS - put your custom fields here
    public static final String LIST_REFRESH_RATE = "listRefreshRate";

    public static final String STREAM_REFRESH_RATE = "streamRefreshRate";

    public static final String MAXIMUM_ROOM_MEMBERS = "maximumRoomMember";
    public static final String LAZY_MSG_SERVICE_TIMEOUT = "lazyGetTimeout";
    public static final String USE_LAZY_MSG_SERVICE = "useLazyMsgService";
    public static final String PERSIST_MESSAGE_DAYS = "persistMessageDays";
    public static final String DEVICE_MAX_CLIENTS = "maxClients";
    public static final String DEVICE_MAX_TEMP_CLIENTS = "maxTempClients";
    public static final int TYPE_PASSWORD_SIMPLE = 0;
    public static final int TYPE_PASSWORD_COMPLEX = 1;
    public static final int AUTOMATIC_DOWNLOAD_ALWAYS = 0;
    public static final int AUTOMATIC_DOWNLOAD_WLAN = 1;
    public static final int AUTOMATIC_DOWNLOAD_NEVER = 2;
    private static final String MANDANTEN_AND_ALIASES = "mandantenAndAliases";
    private static final String IMAGE_QUALITY = "imageQuality";
    private static final String AUTOMATIC_DOWNLOAD_PICTURE = "automaticDownloadPicture";
    private static final String AUTOMATIC_DOWNLOAD_VOICE = "automaticDownloadVoice";
    private static final String AUTOMATIC_DOWNLOAD_VIDEO = "automaticDownloadVideo";
    private static final String AUTOMATIC_DOWNLOAD_FILES = "automaticDownloadFiles";
    private static final String CHECK_PW_AFTER_MINUTES = "checkPasswordAfterMinutes";

    private static final String SAVE_MEDIA_TO_GALLERY = "saveMediaToGallery";

    private static final String ENABLE_RECOVERY_CODE = "enableRecoveryCode";

    private static final String NOTIFICATION_SINGLE_CHAT_ENABLED = "notificationForSingleChatEnabled";

    private static final String NOTIFICATION_GROUP_CHAT_ENABLED = "notificationForGroupChatEnabled";

    private static final String NOTIFICATION_SERVICE_CHAT_ENABLED = "notificationForServiceChatEnabled";

    private static final String NOTIFICATION_CHANNEL_CHAT_ENABLED = "notificationForChannelChatEnabled";

    private static final String PLAY_DESTRUCTION_SOUND = "playDestructionSound";

    private static final String PLAY_SEND_SOUND = "playSendSound";

    private static final String SINGLE_CHATS_ENABLED = "singleChatsEnabled";

    private static final String GROUP_CHATS_ENABLED = "groupChatsEnabled";

    private static final String CHANNELS_ENABLED = "channelsEnabled";

    private static final String UNREAD_MESSAGES_ENABLED = "unreadMessagesEnabled";

    private static final String NUMBER_OF_STARTED_CHATS = "numberOfStartedChats";

    private static final String VIDEO_QUALITY = "videoQuality";

    private static final String SHOW_INAPP_NOTIFICATIONS = "showInappNotifications";

    private static final String SEND_PROFILE_NAME = "sendProfileName";

    private static final String CONFIRM_READ = "confirmRead";

    private static final boolean CONFIRM_READ_DEFAULT = true;

    private static final String SEND_CRASH_LOG = "sendCrashLog";

    /**
     * wurde das Feld bereits irgendwann mal gesetzt
     */
    private static final String IS_SEND_PROFILE_NAME_SET = "isSendProfileNameSet";

    private static final String REG_CONFIRM_CODE = "regConfirmCode";

    private static final String PW_CHANGE_DATE = "passwordChangeDate";

    private static final String HASHED_PW = "hashedPasswords";

    private static final String SAVED_PURCHASES = "savedPurchases";

    private static final String BACKUP_KEY = "backupKey";

    private static final String BACKUP_KEY_SALT = "backupKeySalt";

    private static final String BACKUP_KEY_ROUNDS = "backupKeyRounds";

    private static final String SAVE_MEDIA_IN_BACKUP = "saveMediaInBackup";

    private static final String BACKUP_INTERVAL = "backupInterval";

    private static final String BACKUP_NETWORK_WIFI_ONLY = "backupWifiOnly";

    private static final String SERVER_VERSIONS = "serverVersions";

    private static final String PUBLIC_ONLINE_STATE = "publicOnlineState";

    private static final String DISABLE_BACKUP = "disableBackup";

    private static final String NEED_TO_CHANGE_PASSWORD = "forceNeedToChangePassword";

    private static final String HAS_SYSTEM_GENERATED_PASSWORD = "hasSystemGeneratedPassword";

    private static final String FTS_DB_PASSWORD = "ftsDbPassword";

    private static final boolean SEND_CRASH_LOG_DEFAULT = true;

    private Long mId;

    private Integer mPasswordType;

    private Integer mNumberOfPasswordTries;

    private Boolean mPasswordEnabled;

    private Boolean mDeleteDataAfterTries;

    private byte[] mEncryptedData;

    private byte[] mIv;

    // KEEP FIELDS END

    public Preference() {
    }

    Preference(Long id,
                      Integer passwordType,
                      Integer numberOfPasswordTries,
                      Boolean passwordEnabled,
                      Boolean deleteDataAfterTries,
                      byte[] encryptedData,
                      byte[] iv) {
        this.mId = id;
        this.mPasswordType = passwordType;
        this.mNumberOfPasswordTries = numberOfPasswordTries;
        this.mPasswordEnabled = passwordEnabled;
        this.mDeleteDataAfterTries = deleteDataAfterTries;
        if (encryptedData != null) {
            this.mEncryptedData = encryptedData.clone();
        }
        if (iv != null) {
            this.mIv = iv.clone();
        }
    }

    public Long getId() {
        return mId;
    }

    public void setId(Long id) {
        this.mId = id;
    }

    public Integer getNumberOfPasswordTries() {
        synchronized (this) {
            return mNumberOfPasswordTries;
        }
    }

    public void setNumberOfPasswordTries(Integer numberOfPasswordTries) {
        synchronized (this) {
            this.mNumberOfPasswordTries = numberOfPasswordTries;
        }
    }

    public Boolean getPasswordEnabled() {
        synchronized (this) {
            return mPasswordEnabled;
        }
    }

    public void setPasswordEnabled(Boolean passwordEnabled) {
        synchronized (this) {
            this.mPasswordEnabled = passwordEnabled;
        }
    }

    public Boolean getDeleteDataAfterTries() {
        synchronized (this) {
            return mDeleteDataAfterTries;
        }
    }

    public void setDeleteDataAfterTries(Boolean deleteDataAfterTries) {
        synchronized (this) {
            this.mDeleteDataAfterTries = deleteDataAfterTries;
        }
    }

    public byte[] getEncryptedData() {
        if (mEncryptedData != null) {
            return mEncryptedData.clone();
        } else {
            return null;
        }
    }

    public void clearEncryptedData()
    {
        mEncryptedData = null;
    }

    // KEEP METHODS - put your custom methods here

    public void setEncryptedData(byte[] encryptedData) {
        if (encryptedData != null) {
            this.mEncryptedData = encryptedData.clone();
        }
    }

    public byte[] getIv() {
        if (mIv != null) {
            return mIv.clone();
        } else {
            return null;
        }
    }

    public void setIv(byte[] iv) {
        if (iv != null) {
            this.mIv = iv.clone();
        }
    }

    public Integer getCheckPasswordAfterMinutes()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, CHECK_PW_AFTER_MINUTES);
        }
    }

    public void setCheckPasswordAfterMinutes(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, CHECK_PW_AFTER_MINUTES, value);
        }
    }

    public Boolean getSaveMediaToGallary()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, SAVE_MEDIA_TO_GALLERY);
        }
    }

    public void setSaveMediaToGallary(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SAVE_MEDIA_TO_GALLERY, value);
        }
    }

    public Boolean getNotificationForSingleChatEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, NOTIFICATION_SINGLE_CHAT_ENABLED);
        }
    }

    public void setNotificationForSingleChatEnabled(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, NOTIFICATION_SINGLE_CHAT_ENABLED, value);
        }
    }

    public Boolean getNotificationForGroupChatEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, NOTIFICATION_GROUP_CHAT_ENABLED);
        }
    }

    public void setNotificationForGroupChatEnabled(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, NOTIFICATION_GROUP_CHAT_ENABLED, value);
        }
    }

    public Boolean getNotificationForServiceChatEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, NOTIFICATION_SERVICE_CHAT_ENABLED);
        }
    }

    public void setNotificationForServiceChatEnabled(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, NOTIFICATION_SERVICE_CHAT_ENABLED, value);
        }
    }

    public Boolean getNotificationForChannelChatEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, NOTIFICATION_CHANNEL_CHAT_ENABLED);
        }
    }

    public void setNotificationForChannelChatEnabled(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, NOTIFICATION_CHANNEL_CHAT_ENABLED, value);
        }
    }

    public Integer getListRefreshRate()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, LIST_REFRESH_RATE);
        }
    }

    public void setListRefreshRate(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, LIST_REFRESH_RATE, value);
        }
    }

    public void setStreamRefreshRate(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, STREAM_REFRESH_RATE, value);
        }
    }

    public String getMandantenJson()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, MANDANTEN_AND_ALIASES);
        }
    }

    public void setMandantenJson(final String mandantenJson)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, MANDANTEN_AND_ALIASES, mandantenJson);
        }
    }

    public Integer getMaximumRoomMembers()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, MAXIMUM_ROOM_MEMBERS);
        }
    }

    public void setMaximumRoomMembers(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, MAXIMUM_ROOM_MEMBERS, value);
        }
    }

    public Boolean getPlaySdSound()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, PLAY_DESTRUCTION_SOUND);
        }
    }

    public void setPlaySdSound(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, PLAY_DESTRUCTION_SOUND, value);
        }
    }

    public Boolean getPlaySendSound()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, PLAY_SEND_SOUND);
        }
    }

    public void setPlaySendSound(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, PLAY_SEND_SOUND, value);
        }
    }

    public String getBackupKey()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, BACKUP_KEY);
        }
    }

    public void setBackupKey(String value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, BACKUP_KEY, value);
        }
    }

    public String getBackupKeySalt()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, BACKUP_KEY_SALT);
        }
    }

    public void setBackupKeySalt(String value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, BACKUP_KEY_SALT, value);
        }
    }

    public Integer getBackupKeyRounds()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, BACKUP_KEY_ROUNDS);
        }
    }

    public void setBackupKeyRounds(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, BACKUP_KEY_ROUNDS, value);
        }
    }

    public Boolean getSaveMediaInBackup()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, SAVE_MEDIA_IN_BACKUP);
        }
    }

    public void setSaveMediaInBackup(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SAVE_MEDIA_IN_BACKUP, value);
        }
    }

    public Boolean getBackupNetworkWifiOnly()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, BACKUP_NETWORK_WIFI_ONLY);
        }
    }

    public void setBackupNetworkWifiOnly(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, BACKUP_NETWORK_WIFI_ONLY, value);
        }
    }

    public Integer getBackupInterval()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, BACKUP_INTERVAL);
        }
    }

    public void setBackupInterval(final int interval)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, BACKUP_INTERVAL, interval);
        }
    }

    public Integer getPasswordType() {
        synchronized (this) {
            return mPasswordType;
        }
    }

    public void setPasswordType(Integer passwordType) {
        synchronized (this) {
            this.mPasswordType = passwordType;
        }
    }

    public Integer getLazyMsgServiceTimeout()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, LAZY_MSG_SERVICE_TIMEOUT);
        }
    }

    public void setLazyMsgServiceTimeout(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, LAZY_MSG_SERVICE_TIMEOUT, value);
        }
    }

    public Integer getUseLazyMsgService()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, USE_LAZY_MSG_SERVICE);
        }
    }

    public void setUseLazyMsgService(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, USE_LAZY_MSG_SERVICE, value);
        }
    }

    public Integer getImageQuality()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, IMAGE_QUALITY);
        }
    }

    public void setImageQuality(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, IMAGE_QUALITY, value);
        }
    }

    public int getAutomaticDownloadPicture()
            throws LocalizedException {
        synchronized (this) {
            Integer rc = (Integer) GreenDAOSecurityLayer.getInstance().get(this, AUTOMATIC_DOWNLOAD_PICTURE);
            if (rc == null) {
                return AUTOMATIC_DOWNLOAD_ALWAYS;
            }

            return rc;
        }
    }

    public void setAutomaticDownloadPicture(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, AUTOMATIC_DOWNLOAD_PICTURE, value);
        }
    }

    public int getAutomaticDownloadVoice()
            throws LocalizedException {
        synchronized (this) {
            Integer rc = (Integer) GreenDAOSecurityLayer.getInstance().get(this, AUTOMATIC_DOWNLOAD_VOICE);
            if (rc == null) {
                return AUTOMATIC_DOWNLOAD_WLAN;
            }
            return rc;
        }
    }

    public void setAutomaticDownloadVoice(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, AUTOMATIC_DOWNLOAD_VOICE, value);
        }
    }

    public int getAutomaticDownloadVideo()
            throws LocalizedException {
        synchronized (this) {
            Integer rc = (Integer) GreenDAOSecurityLayer.getInstance().get(this, AUTOMATIC_DOWNLOAD_VIDEO);
            if (rc == null) {
                return AUTOMATIC_DOWNLOAD_WLAN;
            }
            return rc;
        }
    }

    public void setAutomaticDownloadVideo(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, AUTOMATIC_DOWNLOAD_VIDEO, value);
        }
    }

    public int getAutomaticDownloadFiles()
            throws LocalizedException {
        synchronized (this) {
            Integer rc = (Integer) GreenDAOSecurityLayer.getInstance().get(this, AUTOMATIC_DOWNLOAD_FILES);
            if (rc == null) {
                return AUTOMATIC_DOWNLOAD_WLAN;
            }
            return rc;
        }
    }

    public void setAutomaticDownloadFiles(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, AUTOMATIC_DOWNLOAD_FILES, value);
        }
    }

    public Boolean getSingleChatsEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, SINGLE_CHATS_ENABLED);
        }
    }

    public void setSingleChatsEnabled(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SINGLE_CHATS_ENABLED, enabled);
        }
    }

    public Boolean getGroupChatsEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, GROUP_CHATS_ENABLED);
        }
    }

    public void setGroupChatsEnabled(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, GROUP_CHATS_ENABLED, enabled);
        }
    }

    public Boolean getChannelsEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, CHANNELS_ENABLED);
        }
    }

    public void setChannelsEnabled(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, CHANNELS_ENABLED, enabled);
        }
    }

    public Boolean getUnreadMessagesEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, UNREAD_MESSAGES_ENABLED);
        }
    }

    public void setUnreadMessagesEnabled(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, UNREAD_MESSAGES_ENABLED, enabled);
        }
    }

    public Integer getNumberOfStartedChats()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, NUMBER_OF_STARTED_CHATS);
        }
    }

    public void setNumberOfStartedChats(Integer value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, NUMBER_OF_STARTED_CHATS, value);
        }
    }

    public Integer getVideoQuality()
            throws LocalizedException {
        synchronized (this) {
            return (Integer) GreenDAOSecurityLayer.getInstance().get(this, VIDEO_QUALITY);
        }
    }

    public void setVideoQuality(final Integer value)
            throws LocalizedException {
        if (value < CameraView.MODE_LOW_QUALITY) {
            GreenDAOSecurityLayer.getInstance().set(this, VIDEO_QUALITY, CameraView.MODE_LOW_QUALITY);
        } else if (value > CameraView.MODE_VERY_HIGH_QUALITY) {
            GreenDAOSecurityLayer.getInstance().set(this, VIDEO_QUALITY, CameraView.MODE_VERY_HIGH_QUALITY);
        }
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, VIDEO_QUALITY, value);
        }
    }

    public Boolean getShowInappNotifications()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, SHOW_INAPP_NOTIFICATIONS);
        }
    }

    public void setShowInappNotifications(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SHOW_INAPP_NOTIFICATIONS, enabled);
        }
    }

    public Boolean getSendProfileName()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, SEND_PROFILE_NAME);
        }
    }

    public void setSendProfileName(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SEND_PROFILE_NAME, enabled);
        }
    }

    public Boolean getConfirmRead()
            throws LocalizedException {
        synchronized (this) {
            final Boolean confirmRead = (Boolean) GreenDAOSecurityLayer.getInstance().get(this, CONFIRM_READ);

            return confirmRead == null ? CONFIRM_READ_DEFAULT : confirmRead;
        }
    }

    public void setConfirmRead(final Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, CONFIRM_READ, enabled);
        }
    }

    public Boolean getIsSendProfileNameSet()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, IS_SEND_PROFILE_NAME_SET);
        }
    }

    public void setSendProfileNameSet()
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, IS_SEND_PROFILE_NAME_SET, true);
        }
    }

    public String getRegConfirmCode()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, REG_CONFIRM_CODE);
        }
    }

    public void setRegConfirmCode(final String confirmCode)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, REG_CONFIRM_CODE, confirmCode);
        }
    }

    public Date getPasswordChangeDate()
            throws LocalizedException {
        synchronized (this) {
            String date = (String) GreenDAOSecurityLayer.getInstance().get(this, PW_CHANGE_DATE);
            if (date == null) {
                return null;
            }
            return DateUtil.utcStringToDate(date);
        }
    }

    public void setPasswordChangeDate(final Date changeDate)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, PW_CHANGE_DATE, DateUtil.dateToUtcString(changeDate));
        }
    }

    public String getHashedPasswords()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, HASHED_PW);
        }
    }

    public void setHashedPasswords(final String hashes)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, HASHED_PW, hashes);
        }
    }

    public String getSavedPurchases()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, SAVED_PURCHASES);
        }
    }

    public void setSavedPurchases(final String token)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SAVED_PURCHASES, token);
        }
    }

    public String getServerVersions()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, SERVER_VERSIONS);
        }
    }

    public void setServerVersions(final String serverVersions)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SERVER_VERSIONS, serverVersions);
        }
    }

    @SuppressWarnings("unused")
    // Used in B2B
    public Boolean getRecoveryCodeEnabled()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, ENABLE_RECOVERY_CODE);
        }
    }

    @SuppressWarnings("unused")
    // Used in B2B
    public void setRecoveryCodeEnabled(final Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, ENABLE_RECOVERY_CODE, enabled);
        }
    }

    public int getPersistMessageDays()
            throws LocalizedException {
        synchronized (this) {
            Integer rc = (Integer) GreenDAOSecurityLayer.getInstance().get(this, PERSIST_MESSAGE_DAYS);
            if (rc == null) {
                return BuildConfig.DEFAULT_PERSIST_MESSAGE_DAYS;
            }
            return rc;
        }
    }

    public void setPersistMessageDays(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, PERSIST_MESSAGE_DAYS, value);
        }
    }

    public int getDeviceMaxClients()
            throws LocalizedException {
        synchronized (this) {
            Integer rc = (Integer) GreenDAOSecurityLayer.getInstance().get(this, DEVICE_MAX_CLIENTS);
            if (rc == null) {
                return 10;
            }
            return rc;
        }
    }

    public void setDeviceMaxClients(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, DEVICE_MAX_CLIENTS, value);
        }
    }

    public void setDeviceMaxTempClients(int value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, DEVICE_MAX_TEMP_CLIENTS, value);
        }
    }

    public Boolean getPublicOnlineState()
            throws LocalizedException {
        return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, PUBLIC_ONLINE_STATE);
    }

    public void setPublicOnlineState(final boolean visible)
            throws LocalizedException {

        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, PUBLIC_ONLINE_STATE, visible);
        }
    }

    public boolean getDisableBackup()
            throws LocalizedException {
        final Boolean rc = (Boolean) GreenDAOSecurityLayer.getInstance().get(this, DISABLE_BACKUP);
        if (rc == null) {
            return false;
        }
        return rc;
    }

    public void setDisableBackup(final boolean disableBackup)
            throws LocalizedException {

        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, DISABLE_BACKUP, disableBackup);
        }
    }

    public Boolean getForceNeedToChangePassword()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, NEED_TO_CHANGE_PASSWORD);
        }
    }

    public void setForceNeedToChangePassword(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, NEED_TO_CHANGE_PASSWORD, value);
        }
    }

    public Boolean getHasSystemGeneratedPasword()
            throws LocalizedException {
        synchronized (this) {
            return (Boolean) GreenDAOSecurityLayer.getInstance().get(this, HAS_SYSTEM_GENERATED_PASSWORD);
        }
    }

    public void setHasSystemGeneratedPasword(boolean value)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, HAS_SYSTEM_GENERATED_PASSWORD, value);
        }
    }

    public String getEncryptedFtsDatabasePassword()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, FTS_DB_PASSWORD);
        }
    }

    public boolean getSendCrashLog()
            throws LocalizedException {
        synchronized (this) {
            Boolean sendCrashLogSettingsValue = (Boolean) GreenDAOSecurityLayer.getInstance().get(this, SEND_CRASH_LOG);
            if(sendCrashLogSettingsValue == null)
                return SEND_CRASH_LOG_DEFAULT;
            return (boolean) sendCrashLogSettingsValue;
        }
    }

    public void setSendCrashLog(Boolean enabled)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, SEND_CRASH_LOG, enabled);
        }
    }

    public void setEncryptedFtsDatabasePassword(@NonNull final String token)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, FTS_DB_PASSWORD, token);
        }
    }

    // KEEP METHODS END
}
