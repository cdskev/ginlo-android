// Copyright (c) 2020-2022 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import eu.ginlo_apps.ginlo.context.SimsMeApplication;
import eu.ginlo_apps.ginlo.model.AESKeyDataContainer;
import eu.ginlo_apps.ginlo.model.backend.MessageReceiverModel;
import eu.ginlo_apps.ginlo.model.constant.AppConstants;
import eu.ginlo_apps.ginlo.util.JsonUtil;
import eu.ginlo_apps.ginlo.util.MessageDaoHelper;
import eu.ginlo_apps.ginlo.util.SecurityUtil;
import eu.ginlo_apps.ginlo.util.StringUtil;
import java.util.HashMap;
import java.util.Map;

// KEEP INCLUDES END

/**
 * Entity mapped mTo table MESSAGE.
 */
public class Message
        implements java.io.Serializable {

    // KEEP FIELDS - put your custom fields here
    public static final int TYPE_PRIVATE_INTERNAL = 0;

    public static final int TYPE_PRIVATE = 1;

    public static final int TYPE_INTERNAL = 2;

    public static final int TYPE_GROUP = 3;

    public static final int TYPE_GROUP_INVITATION = 4;

    public static final int TYPE_CHANNEL = 5;

    public static final int MESSAGE_STATUS_SENT = 0;

    public static final int MESSAGE_STATUS_DOWNLOADED = 1;

    public static final int MESSAGE_STATUS_READ = 2;

    public static final int MESSAGE_STATUS_ERROR = 3;

    private Long mId;

    private int mType = -1;

    private Boolean mIsSentMessage;

    private Boolean mIsSystemInfo;

    private Boolean mHasSendError;

    private Boolean mRead;

    private String mGuid;

    private String mFrom;

    private String mTo;

    private String mAttachment;

    private String mRequestGuid;

    private byte[] mSignature;

    private byte[] mSignatureSha256;

    private byte[] mData;

    private byte[] mEncryptedFromKey;

    private String mEncryptedFromKey2;

    private byte[] mEncryptedToKey;

    private String mEncryptedToKey2;

    private Long mDateSend;

    private Long mDateSendConfirm;

    private Long mDateDownloaded;

    private Long mDateRead;

    // Entschl√ºsselter Container
    private JsonObject mDecryptedDataContainer;

    private AESKeyDataContainer mAesKeyDataContainer;

    private Long mDateSendTimed;

    private Boolean mIsSignatureValid;

    private String mFeatures;

    private boolean mIsBackup;

    private Long mDatePrefetchedPersistence;

    private String mAttributes;

    private JsonObject mJsonAttributes;

    private Map<String, MessageReceiverModel> mReceivers;

    private String mKey2Iv;

    private String mImportance;

    // KEEP FIELDS END

    public Message() {
    }

    public Message(Long id) {
        this.mId = id;
    }

    public Message(Long id,
                   Integer type,
                   Boolean isSentMessage,
                   Boolean isSystemInfo,
                   Boolean hasSendError,
                   Boolean read,
                   String guid,
                   String from,
                   String to,
                   String attachment,
                   String requestGuid,
                   byte[] signature,
                   byte[] data,
                   byte[] encryptedFromKey,
                   byte[] encryptedToKey,
                   Long dateSend,
                   Long dateSendConfirm,
                   Long dateDownloaded,
                   Long dateRead,
                   Long dateSendTimed,
                   Boolean isSignatureValid,
                   Long datePrefetchedPersistence,
                   String attributes,
                   byte[] signatureSha256,
                   String encryptedfromKey2,
                   String encryptedToKey2,
                   String key2Iv,
                   String importance
    ) {
        this.mId = id;
        this.mType = type != null ? type : -1;
        this.mIsSentMessage = isSentMessage;
        this.mIsSystemInfo = isSystemInfo;
        this.mHasSendError = hasSendError;
        this.mRead = read;
        this.mGuid = guid;
        this.mFrom = from;
        this.mTo = to;
        this.mAttachment = attachment;
        this.mRequestGuid = requestGuid;

        if (signature != null) {
            this.mSignature = signature.clone();
        }
        if (data != null) {
            this.mData = data.clone();
        }

        if (encryptedFromKey != null) {
            this.mEncryptedFromKey = encryptedFromKey.clone();
        }

        if (encryptedToKey != null) {
            this.mEncryptedToKey = encryptedToKey.clone();
        }

        this.mDateSend = dateSend;
        this.mDateSendConfirm = dateSendConfirm;
        this.mDateDownloaded = dateDownloaded;
        this.mDateRead = dateRead;
        this.mDateSendTimed = dateSendTimed;
        this.mIsSignatureValid = isSignatureValid;
        this.mDatePrefetchedPersistence = datePrefetchedPersistence;
        this.mAttributes = attributes;

        if (signatureSha256 != null) {
            this.mSignatureSha256 = signatureSha256.clone();
        }

        this.mEncryptedFromKey2 = encryptedfromKey2;
        this.mEncryptedToKey2 = encryptedToKey2;
        this.mKey2Iv = key2Iv;
        this.mImportance = importance;
    }

    /**
     * copy constructor
     */
    public Message(final Message oldMsg
    ) {
        this(null
                , oldMsg.mType
                , oldMsg.mIsSentMessage
                , oldMsg.mIsSystemInfo
                , oldMsg.mHasSendError
                , oldMsg.mRead
                , oldMsg.mGuid
                , oldMsg.mFrom
                , oldMsg.mTo
                , oldMsg.mAttachment
                , oldMsg.mRequestGuid
                , oldMsg.mSignature
                , oldMsg.mData
                , oldMsg.mEncryptedFromKey
                , oldMsg.mEncryptedToKey
                , oldMsg.mDateSend
                , oldMsg.mDateSendConfirm
                , oldMsg.mDateDownloaded
                , oldMsg.mDateRead
                , oldMsg.mDateSendTimed
                , oldMsg.mIsSignatureValid
                , oldMsg.mDatePrefetchedPersistence
                , oldMsg.mAttributes
                , oldMsg.mSignatureSha256
                , oldMsg.mEncryptedFromKey2
                , oldMsg.mEncryptedToKey2
                , oldMsg.mKey2Iv
                , oldMsg.mImportance
        );
    }

    public Long getId() {
        return mId;
    }

    public void setId(Long id) {
        this.mId = id;
    }

    public int getType() {
        return mType;
    }

    public void setType(Integer type) {
        this.mType = type != null ? type : -1;
    }

    public Boolean getIsSentMessage() {
        return mIsSentMessage != null ? mIsSentMessage : false;
    }

    public void setIsSentMessage(Boolean isSentMessage) {
        this.mIsSentMessage = isSentMessage;
    }

    public Boolean getIsSystemInfo() {
        return mIsSystemInfo != null ? mIsSystemInfo : false;
    }

    public void setIsSystemInfo(Boolean isSystemInfo) {
        this.mIsSystemInfo = isSystemInfo;
    }

    public Boolean getHasSendError() {
        return mHasSendError != null ? mHasSendError : false;
    }

    public void setHasSendError(Boolean hasSendError) {
        this.mHasSendError = hasSendError;
    }

    public Boolean getRead() {
        return mRead != null ? mRead : false;
    }

    public void setRead(Boolean read) {
        this.mRead = read;
    }

    public String getGuid() {
        return mGuid;
    }

    public void setGuid(String guid) {
        this.mGuid = guid;
    }

    public String getFrom() {
        return mFrom;
    }

    public void setFrom(String from) {
        this.mFrom = from;
    }

    public String getTo() {
        return mTo;
    }

    public void setTo(String to) {
        this.mTo = to;
    }

    public String getAttachment() {
        return mAttachment;
    }

    public void setAttachment(String attachment) {
        this.mAttachment = attachment;
    }

    public String getRequestGuid() {
        return mRequestGuid;
    }

    public void setRequestGuid(String requestGuid) {
        this.mRequestGuid = requestGuid;
    }

    public byte[] getSignature() {
        if (mSignature != null) {
            return mSignature.clone();
        } else {
            return null;
        }
    }

    public void setSignature(byte[] signature) {
        if (signature != null) {
            this.mSignature = signature.clone();
        }
    }

    public byte[] getSignatureSha256() {
        if (mSignatureSha256 != null) {
            return mSignatureSha256.clone();
        } else {
            return null;
        }
    }

    public void setSignatureSha256(byte[] signatureSha256) {
        if (signatureSha256 != null) {
            this.mSignatureSha256 = signatureSha256.clone();
        }
    }

    public byte[] getData() {
        if (mData != null) {
            return mData.clone();
        } else {
            return null;
        }
    }

    public void setData(byte[] data) {
        if (data != null) {
            this.mData = data.clone();
        }
    }

    public byte[] getEncryptedFromKey() {
        if (mEncryptedFromKey != null) {
            return mEncryptedFromKey.clone();
        } else {
            return null;
        }
    }

    public void setEncryptedFromKey(byte[] encryptedFromKey) {
        if (encryptedFromKey != null) {
            this.mEncryptedFromKey = encryptedFromKey.clone();
        }
    }

    public byte[] getEncryptedToKey() {
        if (mEncryptedToKey != null) {
            return mEncryptedToKey.clone();
        } else {
            return null;
        }
    }

    public void setEncryptedToKey(byte[] encryptedToKey) {
        if (encryptedToKey != null) {
            this.mEncryptedToKey = encryptedToKey.clone();
        }
    }

    public Long getDateSend() {
        return mDateSend;
    }

    public void setDateSend(Long dateSend) {
        this.mDateSend = dateSend;
    }

    public Long getDateSendConfirm() {
        return mDateSendConfirm;
    }

    public void setDateSendConfirm(Long dateSendConfirm) {
        this.mDateSendConfirm = dateSendConfirm;
    }

    public Long getDateDownloaded() {
        return mDateDownloaded;
    }

    public void setDateDownloaded(Long dateDownloaded) {
        this.mDateDownloaded = dateDownloaded;
    }

    public Long getDateRead() {
        return mDateRead;
    }

    public void setDateRead(Long dateRead) {
        this.mDateRead = dateRead;
    }

    public Long getDateSendTimed() {
        return mDateSendTimed;
    }

    public void setDateSendTimed(Long dateSendTimed) {
        this.mDateSendTimed = dateSendTimed;
    }

    public Boolean getIsSignatureValid() {
        return mIsSignatureValid != null ? mIsSignatureValid : false;
    }

    public void setIsSignatureValid(Boolean signatureValid) {
        mIsSignatureValid = signatureValid;
    }

    public Long getDatePrefetchedPersistence() {
        return mDatePrefetchedPersistence;
    }

    public void setDatePrefetchedPersistence(Long datePrefetchedPersistence) {
        this.mDateDownloaded = datePrefetchedPersistence;
    }

    String getAttributes() {
        return this.mAttributes;
    }

    void setAttributes(String attributes) {
        this.mAttributes = attributes;
    }

    public String getEncryptedFromKey2() {
        return mEncryptedFromKey2;
    }

    public void setEncryptedFromKey2(String encryptedFromKey2) {
        this.mEncryptedFromKey2 = encryptedFromKey2;
    }

    public String getEncryptedToKey2() {
        return mEncryptedToKey2;
    }

    public void setEncryptedToKey2(String encryptedToKey2) {
        this.mEncryptedToKey2 = encryptedToKey2;
    }

    public String getKey2Iv() {
        return mKey2Iv;
    }

    public void setKey2Iv(String key2Iv) {
        this.mKey2Iv = key2Iv;
    }

    public String getImportance() {
        return mImportance;
    }

    public void setImportance(String importance) {
        this.mImportance = importance;
    }

    public boolean getIsPriority() {
        return StringUtil.isEqual(mImportance, "high");
    }

    // KEEP METHODS - put your custom methods here

    public void beforeSafe() {
        if (mReceivers != null) {
            JsonArray jsonArray = MessageDaoHelper.getInstance(SimsMeApplication.getInstance()).getJsonFromReceivers(mReceivers);

            if (jsonArray != null) {
                JsonObject jsonAttributes = getJsonAttributes();

                jsonAttributes.add(AppConstants.MESSAGE_JSON_RECEIVERS, jsonArray);
            }

            mReceivers = null;
        }

        if (mJsonAttributes != null) {
            mAttributes = mJsonAttributes.toString();

            mJsonAttributes = null;
        }
    }

    public byte[] getDataIv() {
        int ivLength = Math.round(SecurityUtil.IV_LENGTH / 8F);
        byte[] iv = new byte[ivLength];

        System.arraycopy(mData, 0, iv, 0, iv.length);
        return iv;
    }

    public byte[] getDataEncryptedContent() {
        int ivLength = Math.round(SecurityUtil.IV_LENGTH / 8F);
        byte[] encryptedContent = new byte[mData.length - ivLength];

        System.arraycopy(mData, ivLength, encryptedContent, 0, encryptedContent.length);
        return encryptedContent;
    }

    public AESKeyDataContainer getAesKeyDataContainer() {
        return mAesKeyDataContainer;
    }

    public void setAesKeyDataContainer(AESKeyDataContainer aesKeyDataContainer) {
        this.mAesKeyDataContainer = aesKeyDataContainer;
    }

    public JsonObject getDecryptedDataContainer() {
        return mDecryptedDataContainer;
    }

    public void setDecryptedDataContainer(JsonObject decryptedDataContainer) {
        synchronized (this) {
            mDecryptedDataContainer = decryptedDataContainer;
        }
    }

    public boolean isSentMessage() {
        return (mIsSentMessage != null) && mIsSentMessage;
    }

    public boolean isSystemInfo() {
        return (mIsSystemInfo != null) && mIsSystemInfo;
    }

    public boolean isMessageDecrypted() {
        return mDecryptedDataContainer != null;
    }

    @Nullable
    public JsonElement getElementFromAttributes(@NonNull String key) {
        JsonObject jsonAttributes = getJsonAttributes();

        if (jsonAttributes != null && jsonAttributes.has(key)) {
            return jsonAttributes.get(key);
        }

        return null;
    }

    public void setElementToAttributes(@NonNull String key, @NonNull JsonElement element) {
        JsonObject jsonAttributes = getJsonAttributes();

        if (jsonAttributes != null) {
            jsonAttributes.add(key, element);
        }
    }

    private JsonObject getJsonAttributes() {
        if (mJsonAttributes == null) {
            if (!StringUtil.isNullOrEmpty(mAttributes)) {
                mJsonAttributes = JsonUtil.getJsonObjectFromString(mAttributes);
            } else {
                mJsonAttributes = new JsonObject();
            }
        }

        return mJsonAttributes;
    }

    @Nullable
    public MessageReceiverModel getReceiverForGuid(@NonNull final String guid, @NonNull SimsMeApplication application) {
        Map<String, MessageReceiverModel> receivers = getReceivers(application);

        if (receivers != null) {
            return receivers.get(guid);
        }

        return null;
    }

    public void setReceiverForGuid(@NonNull final MessageReceiverModel receiver, @NonNull SimsMeApplication application) {
        Map<String, MessageReceiverModel> receivers = getReceivers(application);

        if (receivers != null && !StringUtil.isNullOrEmpty(receiver.guid)) {
            receivers.put(receiver.guid, receiver);
        }
    }

    /**
     * checkAllReceiver
     *
     * @param hasReadOrDownloaded 0 -> mRead; 1 -> downloaded
     * @return true if all receiver has mRead/downloaded
     */
    public boolean checkAllReceiver(int hasReadOrDownloaded, @NonNull SimsMeApplication application) {
        if (hasReadOrDownloaded < 0 || hasReadOrDownloaded > 1) {
            return false;
        }

        JsonElement jeHasAll;

        if (hasReadOrDownloaded == 0) {
            jeHasAll = getElementFromAttributes("hasAllRead");
        } else {
            jeHasAll = getElementFromAttributes("hasAllDownloaded");
        }

        if (jeHasAll != null && jeHasAll.isJsonPrimitive()) {
            return jeHasAll.getAsBoolean();
        }

        Map<String, MessageReceiverModel> receivers = getReceivers(application);

        if (receivers == null || receivers.size() < 1) {
            return false;
        }

        int groupMemberCount = getChatMemberCount();
        if (groupMemberCount == -1) {
            return false;
        }

        if (receivers.size() < (groupMemberCount - 1)) {
            return false;
        }

        boolean returnValue = true;

        for (MessageReceiverModel receiver : receivers.values()) {
            if (hasReadOrDownloaded == 0) {
                if (receiver.dateRead <= 0) {
                    returnValue = false;
                    break;
                }
            } else {
                if (receiver.dateDownloaded <= 0) {
                    returnValue = false;
                    break;
                }
            }
        }

        if (returnValue) {
            if (hasReadOrDownloaded == 0) {
                setElementToAttributes("hasAllRead", new JsonPrimitive(true));
            } else {
                setElementToAttributes("hasAllDownloaded", new JsonPrimitive(true));
            }
        }

        return returnValue;
    }

    public Map<String, MessageReceiverModel> getReceivers(SimsMeApplication application) {
        if (mReceivers == null) {
            JsonElement je = getElementFromAttributes(AppConstants.MESSAGE_JSON_RECEIVERS);

            if (je == null || !je.isJsonArray()) {
                mReceivers = new HashMap<>();
            } else {
                mReceivers = MessageDaoHelper.getInstance(application).getReceiversFromMessage(je.getAsJsonArray());
            }
        }

        return mReceivers;
    }

    public boolean hasReceiversDownloaded() {
        if (mType == -1) {
            return false;
        }

        if (mType == TYPE_GROUP) {
            JsonElement jeHasAll = getElementFromAttributes("hasAllDownloaded");

            if (jeHasAll != null && jeHasAll.isJsonPrimitive()) {
                return jeHasAll.getAsBoolean();
            } else {
                return false;
            }
        } else {
            return mDateDownloaded != null && mDateDownloaded > 0;
        }
    }

    public boolean hasReceiversRead() {
        return hasReceiversRead(false);
    }

    public boolean hasReceiversRead(boolean checkOnlyLocalUser) {
        if (mType == -1) {
            return false;
        }

        if (mType == TYPE_GROUP && !checkOnlyLocalUser) {
            JsonElement jeHasAll = getElementFromAttributes("hasAllRead");

            if (jeHasAll != null && jeHasAll.isJsonPrimitive()) {
                return jeHasAll.getAsBoolean();
            } else {
                return false;
            }
        } else {
            return mDateRead != null && mDateRead > 0;
        }
    }

    public int getChatMemberCount() {
        JsonElement je = getElementFromAttributes("chatMemberCount");
        if (je != null) {
            return je.getAsInt();
        }

        return -1;
    }

    public void setChatMemberCount(int count) {
        setElementToAttributes("chatMemberCount", new JsonPrimitive(count));
    }

    public boolean getIsAbsentMessage() {
        JsonElement je = getElementFromAttributes("isAbsentMessage");

        return je != null && je.getAsBoolean();
    }

    public void setIsAbsentMessage(final boolean value) {
        setElementToAttributes("isAbsentMessage", new JsonPrimitive(value));
    }

    public String getFeatures() {
        return mFeatures;
    }

    public void setFeatures(String features) {
        mFeatures = features;
    }

    public boolean isBackup() {
        return mIsBackup;
    }

    public void setIsBackUp(boolean isBackup) {
        mIsBackup = isBackup;
    }

    public void setServerMimeTye(String mimeType) {
        JsonElement e = new JsonPrimitive(mimeType);
        this.setElementToAttributes("serverMimeType", e);
    }

    public String getServerMimeType() {
        JsonElement e = this.getElementFromAttributes("serverMimeType");
        if (e == null) {
            return null;
        }
        return e.getAsString();
    }

    public boolean isAttachmentDeletedServer() {
        JsonElement e = this.getElementFromAttributes("attachmentDeletedServer");
        if (e == null) {
            return false;
        }
        return e.getAsString().equals("true");
    }

    public void setAttachmentDeletedServer(boolean force) {
        JsonElement e = new JsonPrimitive(force ? "true" : "false");
        this.setElementToAttributes("attachmentDeletedServer", e);
    }

    public String getPushInfo() {
        JsonElement e = this.getElementFromAttributes("serverPushInfo");
        if (e == null) {
            return null;
        }
        return e.getAsString();
    }

    public void setPushInfo(String pushInfo) {
        JsonElement e = new JsonPrimitive(pushInfo);
        this.setElementToAttributes("serverPushInfo", e);
    }

    // KEEP METHODS END
}
