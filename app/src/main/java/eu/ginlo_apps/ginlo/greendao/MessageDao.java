// Copyright (c) 2020-2022 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.Message;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MESSAGE.
 */
public class MessageDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    public MessageDao(DaoConfig config) {
        super(config);
    }

    public MessageDao(DaoConfig config,
                      AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'TYPE' INTEGER,"  // 1: type
                + "'IS_SENT_MESSAGE' INTEGER,"  // 2: isSentMessage
                + "'IS_SYSTEM_INFO' INTEGER,"  // 3: isSystemInfo
                + "'HAS_SEND_ERROR' INTEGER,"  // 4: hasSendError
                + "'READ' INTEGER,"  // 5: read
                + "'GUID' TEXT,"  // 6: guid
                + "'FROM' TEXT,"  // 7: from
                + "'TO' TEXT,"  // 8: to
                + "'ATTACHMENT' TEXT,"  // 9: attachment
                + "'REQUEST_GUID' TEXT,"  // 10: requestGuid
                + "'SIGNATURE' BLOB,"  // 11: signature
                + "'DATA' BLOB,"  // 12: data
                + "'ENCRYPTED_FROM_KEY' BLOB,"  // 13: encryptedFromKey
                + "'ENCRYPTED_TO_KEY' BLOB,"  // 14: encryptedToKey
                + "'DATE_SEND' INTEGER,"  // 15: dateSend
                + "'DATE_SEND_CONFIRM' INTEGER,"  // 16: dateSendConfirm
                + "'DATE_DOWNLOADED' INTEGER,"  // 17: dateDownloaded
                + "'DATE_READ' INTEGER," // 18: dateRead
                + "'DATE_SEND_TIMED' INTEGER," // 19: dateSendTimed
                + "'IS_SIGNATURE_VALID' INTEGER," // 20: isSignatureValid
                + "'DATE_PREFETCHED_PERSISTENCE' INTEGER," // 21: datePrefetchedPersistence
                + "'ATTRIBUTES' TEXT,"  // 22: attributes
                + "'SIGNATURE_SHA256' BLOB,"  // 23: signatureSha256
                + "'ENCRYPTED_FROM_KEY2' TEXT,"  // 24: encryptedFromKey2
                + "'ENCRYPTED_TO_KEY2' TEXT,"  // 25: encryptedToKey2
                + "'KEY2_IV' TEXT,"  // 26: key2 IV
                + "'IMPORTANCE' TEXT"  // 27: importance IV
                + ");");
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MESSAGE'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.Message entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        Integer type = entity.getType();

        if (type != null) {
            stmt.bindLong(NumberConstants.INT_2, type);
        }

        Boolean isSentMessage = entity.getIsSentMessage();

        if (isSentMessage != null) {
            stmt.bindLong(NumberConstants.INT_3, isSentMessage ? 1L : 0L);
        }

        Boolean isSystemInfo = entity.getIsSystemInfo();

        if (isSystemInfo != null) {
            stmt.bindLong(NumberConstants.INT_4, isSystemInfo ? 1L : 0L);
        }

        Boolean hasSendError = entity.getHasSendError();

        if (hasSendError != null) {
            stmt.bindLong(NumberConstants.INT_5, hasSendError ? 1L : 0L);
        }

        Boolean read = entity.getRead();

        if (read != null) {
            stmt.bindLong(NumberConstants.INT_6, read ? 1L : 0L);
        }

        String guid = entity.getGuid();

        if (guid != null) {
            stmt.bindString(NumberConstants.INT_7, guid);
        }

        String from = entity.getFrom();

        if (from != null) {
            stmt.bindString(NumberConstants.INT_8, from);
        }

        String to = entity.getTo();

        if (to != null) {
            stmt.bindString(NumberConstants.INT_9, to);
        }

        String attachment = entity.getAttachment();

        if (attachment != null) {
            stmt.bindString(NumberConstants.INT_10, attachment);
        }

        String requestGuid = entity.getRequestGuid();

        if (requestGuid != null) {
            stmt.bindString(NumberConstants.INT_11, requestGuid);
        }

        byte[] signature = entity.getSignature();

        if (signature != null) {
            stmt.bindBlob(NumberConstants.INT_12, signature);
        }

        byte[] data = entity.getData();

        if (data != null) {
            stmt.bindBlob(NumberConstants.INT_13, data);
        }

        byte[] encryptedFromKey = entity.getEncryptedFromKey();

        if (encryptedFromKey != null) {
            stmt.bindBlob(NumberConstants.INT_14, encryptedFromKey);
        }

        byte[] encryptedToKey = entity.getEncryptedToKey();

        if (encryptedToKey != null) {
            stmt.bindBlob(NumberConstants.INT_15, encryptedToKey);
        }

        Long dateSend = entity.getDateSend();

        if (dateSend != null) {
            stmt.bindLong(NumberConstants.INT_16, dateSend);
        }

        Long dateSendConfirm = entity.getDateSendConfirm();

        if (dateSendConfirm != null) {
            stmt.bindLong(NumberConstants.INT_17, dateSendConfirm);
        }

        Long dateDownloaded = entity.getDateDownloaded();

        if (dateDownloaded != null) {
            stmt.bindLong(NumberConstants.INT_18, dateDownloaded);
        }

        Long dateRead = entity.getDateRead();

        if (dateRead != null) {
            stmt.bindLong(NumberConstants.INT_19, dateRead);
        }

        Long dateSendTimed = entity.getDateSendTimed();

        if (dateSendTimed != null) {
            stmt.bindLong(NumberConstants.INT_20, dateSendTimed);
        }

        Boolean isSignatureValid = entity.getIsSignatureValid();

        if (isSignatureValid != null) {
            stmt.bindLong(NumberConstants.INT_21, isSignatureValid ? 1L : 0L);
        }

        Long datePrefetchedPersistence = entity.getDatePrefetchedPersistence();

        if (datePrefetchedPersistence != null) {
            stmt.bindLong(NumberConstants.INT_22, datePrefetchedPersistence);
        }

        String attributes = entity.getAttributes();

        if (attributes != null) {
            stmt.bindString(NumberConstants.INT_23, attributes);
        }

        byte[] signatureSha256 = entity.getSignatureSha256();

        if (signatureSha256 != null) {
            stmt.bindBlob(NumberConstants.INT_24, signatureSha256);
        }

        String encryptedToFromKey2 = entity.getEncryptedFromKey2();

        if (encryptedToFromKey2 != null) {
            stmt.bindString(NumberConstants.INT_25, encryptedToFromKey2);
        }

        String encryptedToKey2 = entity.getEncryptedToKey2();

        if (encryptedToKey2 != null) {
            stmt.bindString(NumberConstants.INT_26, encryptedToKey2);
        }

        String key2Iv = entity.getKey2Iv();

        if (key2Iv != null) {
            stmt.bindString(NumberConstants.INT_27, key2Iv);
        }

        String importance = entity.getImportance();

        if (importance != null) {
            stmt.bindString(NumberConstants.INT_28, importance);
        }
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.Message entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        Integer type = entity.getType();

        if (type != null) {
            stmt.bindLong(NumberConstants.INT_2, type);
        }

        Boolean isSentMessage = entity.getIsSentMessage();

        if (isSentMessage != null) {
            stmt.bindLong(NumberConstants.INT_3, isSentMessage ? 1L : 0L);
        }

        Boolean isSystemInfo = entity.getIsSystemInfo();

        if (isSystemInfo != null) {
            stmt.bindLong(NumberConstants.INT_4, isSystemInfo ? 1L : 0L);
        }

        Boolean hasSendError = entity.getHasSendError();

        if (hasSendError != null) {
            stmt.bindLong(NumberConstants.INT_5, hasSendError ? 1L : 0L);
        }

        Boolean read = entity.getRead();

        if (read != null) {
            stmt.bindLong(NumberConstants.INT_6, read ? 1L : 0L);
        }

        String guid = entity.getGuid();

        if (guid != null) {
            stmt.bindString(NumberConstants.INT_7, guid);
        }

        String from = entity.getFrom();

        if (from != null) {
            stmt.bindString(NumberConstants.INT_8, from);
        }

        String to = entity.getTo();

        if (to != null) {
            stmt.bindString(NumberConstants.INT_9, to);
        }

        String attachment = entity.getAttachment();

        if (attachment != null) {
            stmt.bindString(NumberConstants.INT_10, attachment);
        }

        String requestGuid = entity.getRequestGuid();

        if (requestGuid != null) {
            stmt.bindString(NumberConstants.INT_11, requestGuid);
        }

        byte[] signature = entity.getSignature();

        if (signature != null) {
            stmt.bindBlob(NumberConstants.INT_12, signature);
        }

        byte[] data = entity.getData();

        if (data != null) {
            stmt.bindBlob(NumberConstants.INT_13, data);
        }

        byte[] encryptedFromKey = entity.getEncryptedFromKey();

        if (encryptedFromKey != null) {
            stmt.bindBlob(NumberConstants.INT_14, encryptedFromKey);
        }

        byte[] encryptedToKey = entity.getEncryptedToKey();

        if (encryptedToKey != null) {
            stmt.bindBlob(NumberConstants.INT_15, encryptedToKey);
        }

        Long dateSend = entity.getDateSend();

        if (dateSend != null) {
            stmt.bindLong(NumberConstants.INT_16, dateSend);
        }

        Long dateSendConfirm = entity.getDateSendConfirm();

        if (dateSendConfirm != null) {
            stmt.bindLong(NumberConstants.INT_17, dateSendConfirm);
        }

        Long dateDownloaded = entity.getDateDownloaded();

        if (dateDownloaded != null) {
            stmt.bindLong(NumberConstants.INT_18, dateDownloaded);
        }

        Long dateRead = entity.getDateRead();

        if (dateRead != null) {
            stmt.bindLong(NumberConstants.INT_19, dateRead);
        }

        Long dateSendTimed = entity.getDateSendTimed();

        if (dateSendTimed != null) {
            stmt.bindLong(NumberConstants.INT_20, dateSendTimed);
        }

        Boolean isSignatureValid = entity.getIsSignatureValid();

        if (isSignatureValid != null) {
            stmt.bindLong(NumberConstants.INT_21, isSignatureValid ? 1L : 0L);
        }

        Long datePrefetchedPersistence = entity.getDatePrefetchedPersistence();

        if (datePrefetchedPersistence != null) {
            stmt.bindLong(NumberConstants.INT_22, datePrefetchedPersistence);
        }

        String attributes = entity.getAttributes();

        if (attributes != null) {
            stmt.bindString(NumberConstants.INT_23, attributes);
        }

        byte[] signatureSha256 = entity.getSignatureSha256();

        if (signatureSha256 != null) {
            stmt.bindBlob(NumberConstants.INT_24, signatureSha256);
        }

        String encryptedToFromKey2 = entity.getEncryptedFromKey2();

        if (encryptedToFromKey2 != null) {
            stmt.bindString(NumberConstants.INT_25, encryptedToFromKey2);
        }

        String encryptedToKey2 = entity.getEncryptedToKey2();

        if (encryptedToKey2 != null) {
            stmt.bindString(NumberConstants.INT_26, encryptedToKey2);
        }

        String key2Iv = entity.getKey2Iv();

        if (key2Iv != null) {
            stmt.bindString(NumberConstants.INT_27, key2Iv);
        }

        String importance = entity.getImportance();

        if (importance != null) {
            stmt.bindString(NumberConstants.INT_28, importance);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.Message readEntity(Cursor cursor,
                                                          int offset) {

        return new eu.ginlo_apps.ginlo.greendao.Message(  //
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getInt(offset + NumberConstants.INT_1),  // type
                cursor.isNull(offset + NumberConstants.INT_2) ? null : (cursor.getShort(offset + NumberConstants.INT_2) != 0),  // isSentMessage
                cursor.isNull(offset + NumberConstants.INT_3) ? null : (cursor.getShort(offset + NumberConstants.INT_3) != 0),  // isSystemInfo
                cursor.isNull(offset + NumberConstants.INT_4) ? null : (cursor.getShort(offset + NumberConstants.INT_4) != 0),  // hasSendError
                cursor.isNull(offset + NumberConstants.INT_5) ? null : (cursor.getShort(offset + NumberConstants.INT_5) != 0),  // read
                cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getString(offset + NumberConstants.INT_6),  // guid
                cursor.isNull(offset + NumberConstants.INT_7) ? null : cursor.getString(offset + NumberConstants.INT_7),  // from
                cursor.isNull(offset + NumberConstants.INT_8) ? null : cursor.getString(offset + NumberConstants.INT_8),  // to
                cursor.isNull(offset + NumberConstants.INT_9) ? null : cursor.getString(offset + NumberConstants.INT_9),  // attachment
                cursor.isNull(offset + NumberConstants.INT_10) ? null : cursor.getString(offset + NumberConstants.INT_10),  // requestGuid
                cursor.isNull(offset + NumberConstants.INT_11) ? null : cursor.getBlob(offset + NumberConstants.INT_11),  // signature
                cursor.isNull(offset + NumberConstants.INT_12) ? null : cursor.getBlob(offset + NumberConstants.INT_12),  // data
                cursor.isNull(offset + NumberConstants.INT_13) ? null : cursor.getBlob(offset + NumberConstants.INT_13),  // encryptedFromKey
                cursor.isNull(offset + NumberConstants.INT_14) ? null : cursor.getBlob(offset + NumberConstants.INT_14),  // encryptedToKey
                cursor.isNull(offset + NumberConstants.INT_15) ? null : cursor.getLong(offset + NumberConstants.INT_15),  // dateSend
                cursor.isNull(offset + NumberConstants.INT_16) ? null : cursor.getLong(offset + NumberConstants.INT_16),  // dateSendConfirm
                cursor.isNull(offset + NumberConstants.INT_17) ? null : cursor.getLong(offset + NumberConstants.INT_17),  // dateDownloaded
                cursor.isNull(offset + NumberConstants.INT_18) ? null : cursor.getLong(offset + NumberConstants.INT_18),  // dateRead
                cursor.isNull(offset + NumberConstants.INT_19) ? null : cursor.getLong(offset + NumberConstants.INT_19),  // dateSendTimed
                cursor.isNull(offset + NumberConstants.INT_20) ? null : (cursor.getShort(offset + NumberConstants.INT_20) != 0),    //isSignatureValid
                cursor.isNull(offset + NumberConstants.INT_21) ? null : cursor.getLong(offset + NumberConstants.INT_21),  // datePrefetchedPersistence
                cursor.isNull(offset + NumberConstants.INT_22) ? null : cursor.getString(offset + NumberConstants.INT_22), // attributes
                cursor.isNull(offset + NumberConstants.INT_23) ? null : cursor.getBlob(offset + NumberConstants.INT_23),  // signatureSha256
                cursor.isNull(offset + NumberConstants.INT_24) ? null : cursor.getString(offset + NumberConstants.INT_24),  // encryptedFromKey2
                cursor.isNull(offset + NumberConstants.INT_25) ? null : cursor.getString(offset + NumberConstants.INT_25),  // encryptedToKey2
                cursor.isNull(offset + NumberConstants.INT_26) ? null : cursor.getString(offset + NumberConstants.INT_26),  // KEY2_IV
                cursor.isNull(offset + NumberConstants.INT_27) ? null : cursor.getString(offset + NumberConstants.INT_27)  // IMPORTANCE

        );
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.Message entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setType(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getInt(offset + NumberConstants.INT_1));
        entity.setIsSentMessage(cursor.isNull(offset + NumberConstants.INT_2) ? null : (cursor.getShort(offset + NumberConstants.INT_2) != 0));
        entity.setIsSystemInfo(cursor.isNull(offset + NumberConstants.INT_3) ? null : (cursor.getShort(offset + NumberConstants.INT_3) != 0));
        entity.setHasSendError(cursor.isNull(offset + NumberConstants.INT_4) ? null : (cursor.getShort(offset + NumberConstants.INT_4) != 0));
        entity.setRead(cursor.isNull(offset + NumberConstants.INT_5) ? null : (cursor.getShort(offset + NumberConstants.INT_5) != 0));
        entity.setGuid(cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getString(offset + NumberConstants.INT_6));
        entity.setFrom(cursor.isNull(offset + NumberConstants.INT_7) ? null : cursor.getString(offset + NumberConstants.INT_7));
        entity.setTo(cursor.isNull(offset + NumberConstants.INT_8) ? null : cursor.getString(offset + NumberConstants.INT_8));
        entity.setAttachment(cursor.isNull(offset + NumberConstants.INT_9) ? null : cursor.getString(offset + NumberConstants.INT_9));
        entity.setRequestGuid(cursor.isNull(offset + NumberConstants.INT_10) ? null : cursor.getString(offset + NumberConstants.INT_10));
        entity.setSignature(cursor.isNull(offset + NumberConstants.INT_11) ? null : cursor.getBlob(offset + NumberConstants.INT_11));
        entity.setData(cursor.isNull(offset + NumberConstants.INT_12) ? null : cursor.getBlob(offset + NumberConstants.INT_12));
        entity.setEncryptedFromKey(cursor.isNull(offset + NumberConstants.INT_13) ? null : cursor.getBlob(offset + NumberConstants.INT_13));
        entity.setEncryptedToKey(cursor.isNull(offset + NumberConstants.INT_14) ? null : cursor.getBlob(offset + NumberConstants.INT_14));
        entity.setDateSend(cursor.isNull(offset + NumberConstants.INT_15) ? null : cursor.getLong(offset + NumberConstants.INT_15));
        entity.setDateSendConfirm(cursor.isNull(offset + NumberConstants.INT_16) ? null : cursor.getLong(offset + NumberConstants.INT_16));
        entity.setDateDownloaded(cursor.isNull(offset + NumberConstants.INT_17) ? null : cursor.getLong(offset + NumberConstants.INT_17));
        entity.setDateRead(cursor.isNull(offset + NumberConstants.INT_18) ? null : cursor.getLong(offset + NumberConstants.INT_18));
        entity.setDateSendTimed(cursor.isNull(offset + NumberConstants.INT_19) ? null : cursor.getLong(offset + NumberConstants.INT_19));
        entity.setIsSignatureValid(cursor.isNull(offset + NumberConstants.INT_20) ? null : (cursor.getShort(offset + NumberConstants.INT_20) != 0));
        entity.setDatePrefetchedPersistence(cursor.isNull(offset + NumberConstants.INT_21) ? null : cursor.getLong(offset + NumberConstants.INT_21));
        entity.setAttributes(cursor.isNull(offset + NumberConstants.INT_22) ? null : cursor.getString(offset + NumberConstants.INT_22));
        entity.setSignatureSha256(cursor.isNull(offset + NumberConstants.INT_23) ? null : cursor.getBlob(offset + NumberConstants.INT_23));
        entity.setEncryptedFromKey2(cursor.isNull(offset + NumberConstants.INT_24) ? null : cursor.getString(offset + NumberConstants.INT_24));
        entity.setEncryptedToKey2(cursor.isNull(offset + NumberConstants.INT_25) ? null : cursor.getString(offset + NumberConstants.INT_25));
        entity.setKey2Iv(cursor.isNull(offset + NumberConstants.INT_26) ? null : cursor.getString(offset + NumberConstants.INT_26));
        entity.setImportance(cursor.isNull(offset + NumberConstants.INT_27) ? null : cursor.getString(offset + NumberConstants.INT_27));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.Message entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.Message entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(Message entity) {
        return entity != null && entity.getId() != null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property Type = new Property(NumberConstants.INT_1, Integer.class, "type", false, "TYPE");

        public static final Property IsSentMessage = new Property(NumberConstants.INT_2, Boolean.class, "isSentMessage", false,
                "IS_SENT_MESSAGE");

        public static final Property IsSystemInfo = new Property(NumberConstants.INT_3, Boolean.class, "isSystemInfo", false,
                "IS_SYSTEM_INFO");

        public static final Property HasSendError = new Property(NumberConstants.INT_4, Boolean.class, "hasSendError", false,
                "HAS_SEND_ERROR");

        public static final Property Read = new Property(NumberConstants.INT_5, Boolean.class, "read", false, "READ");

        public static final Property Guid = new Property(NumberConstants.INT_6, String.class, "guid", false, "GUID");

        public static final Property From = new Property(NumberConstants.INT_7, String.class, "from", false, "FROM");

        public static final Property To = new Property(NumberConstants.INT_8, String.class, "to", false, "TO");

        public static final Property Attachment = new Property(NumberConstants.INT_9, String.class, "attachment", false, "ATTACHMENT");

        public static final Property RequestGuid = new Property(NumberConstants.INT_10, String.class, "requestGuid", false,
                "REQUEST_GUID");

        public static final Property Signature = new Property(NumberConstants.INT_11, byte[].class, "signature", false, "SIGNATURE");

        public static final Property Data = new Property(NumberConstants.INT_12, byte[].class, "data", false, "DATA");

        public static final Property EncryptedFromKey = new Property(NumberConstants.INT_13, byte[].class, "encryptedFromKey", false,
                "ENCRYPTED_FROM_KEY");

        public static final Property EncryptedToKey = new Property(NumberConstants.INT_14, byte[].class, "encryptedToKey", false,
                "ENCRYPTED_TO_KEY");

        public static final Property DateSend = new Property(NumberConstants.INT_15, Long.class, "dateSend", false, "DATE_SEND");

        public static final Property DateSendConfirm = new Property(NumberConstants.INT_16, Long.class, "dateSendConfirm", false,
                "DATE_SEND_CONFIRM");

        public static final Property DateDownloaded = new Property(NumberConstants.INT_17, Long.class, "dateDownloaded", false,
                "DATE_DOWNLOADED");

        public static final Property DateRead = new Property(NumberConstants.INT_18, Long.class, "dateRead", false, "DATE_READ");

        public static final Property DateSendTimed = new Property(NumberConstants.INT_19, Long.class, "dateSendTimed", false, "DATE_SEND_TIMED");

        public static final Property IsSignatureValid = new Property(NumberConstants.INT_20, Boolean.class, "isSignatureValid", false, "IS_SIGNATURE_VALID");

        public static final Property DatePrefetchedPersistence = new Property(NumberConstants.INT_21, Long.class, "datePrefetchedPersistence", false,
                "DATE_PREFETCHED_PERSISTENCE");

        public static final Property Attributes = new Property(NumberConstants.INT_22, String.class, "attributes", false, "ATTRIBUTES");

        public static final Property SignatureSha256 = new Property(NumberConstants.INT_23, byte[].class, "signature-sha256", false, "SIGNATURE_SHA256");

        public static final Property EncryptedFromKey2 = new Property(NumberConstants.INT_24, String.class, "encryptedFromKey2", false, "ENCRYPTED_FROM_KEY2");

        public static final Property EncryptedToKey2 = new Property(NumberConstants.INT_25, String.class, "encryptedToKey2", false, "ENCRYPTED_TO_KEY2");

        public static final Property Key2Iv = new Property(NumberConstants.INT_26, String.class, "key2Iv", false, "KEY2_IV");

        public static final Property Importance = new Property(NumberConstants.INT_27, String.class, "importance", false, "IMPORTANCE");
    }
}
