// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.Chat;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHAT.
 */
public class ChatDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.Chat, Long> {

    public static final String TABLENAME = "CHAT";

    public ChatDao(DaoConfig config) {
        super(config);
    }

    public ChatDao(DaoConfig config,
                   AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'CHAT' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'CHAT_GUID' TEXT,"  // 1: chatGuid
                + "'TYPE' INTEGER,"  // 2: type
                + "'IV' BLOB,"  // 3: iv
                + "'ENCRYPTED_DATA' BLOB," // 4: encryptedData
                + "'LAST_MSG_ID' INTEGER," // 5: lastMsgId
                + "'LAST_MODIFIED_DATE' INTEGER);"); // 6: lastChatModifiedDate
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.Chat entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String chatGuid = entity.getChatGuid();

        if (chatGuid != null) {
            stmt.bindString(NumberConstants.INT_2, chatGuid);
        }

        Integer type = entity.getType();

        if (type != null) {
            stmt.bindLong(NumberConstants.INT_3, type);
        }

        byte[] iv = entity.getIv();

        if (iv != null) {
            stmt.bindBlob(NumberConstants.INT_4, iv);
        }

        byte[] encryptedData = entity.getEncryptedData();

        if (encryptedData != null) {
            stmt.bindBlob(NumberConstants.INT_5, encryptedData);
        }

        Long lastMsgId = entity.getLastMsgId();

        if (lastMsgId != null) {
            stmt.bindLong(NumberConstants.INT_6, lastMsgId);
        }

        Long lastChatModifiedDate = entity.getLastChatModifiedDate();

        if (lastChatModifiedDate != null) {
            stmt.bindLong(NumberConstants.INT_7, lastChatModifiedDate);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.Chat readEntity(Cursor cursor,
                                                       int offset) {
        eu.ginlo_apps.ginlo.greendao.Chat entity = new eu.ginlo_apps.ginlo.greendao.Chat(  //
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1),  // chatGuid
                cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getInt(offset + NumberConstants.INT_2),  // type
                cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getBlob(offset + NumberConstants.INT_3),  // iv
                cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getBlob(offset + NumberConstants.INT_4), // encryptedData
                cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getLong(offset + NumberConstants.INT_5), // lastMsgId
                cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getLong(offset + NumberConstants.INT_6) // lastChatModifiedDate
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.Chat entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setChatGuid(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1));
        entity.setType(cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getInt(offset + NumberConstants.INT_2));
        entity.setIv(cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getBlob(offset + NumberConstants.INT_3));
        entity.setEncryptedData(cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getBlob(offset + NumberConstants.INT_4));
        entity.setLastMsgId(cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getLong(offset + NumberConstants.INT_5));
        entity.setLastChatModifiedDate(cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getLong(offset + NumberConstants.INT_6));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.Chat entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String chatGuid = entity.getChatGuid();

        if (chatGuid != null) {
            stmt.bindString(NumberConstants.INT_2, chatGuid);
        }

        Integer type = entity.getType();

        if (type != null) {
            stmt.bindLong(NumberConstants.INT_3, type);
        }

        byte[] iv = entity.getIv();

        if (iv != null) {
            stmt.bindBlob(NumberConstants.INT_4, iv);
        }

        byte[] encryptedData = entity.getEncryptedData();

        if (encryptedData != null) {
            stmt.bindBlob(NumberConstants.INT_5, encryptedData);
        }

        Long lastMsgId = entity.getLastMsgId();

        if (lastMsgId != null) {
            stmt.bindLong(NumberConstants.INT_6, lastMsgId);
        }

        Long lastChatModifiedDate = entity.getLastChatModifiedDate();

        if (lastChatModifiedDate != null) {
            stmt.bindLong(NumberConstants.INT_7, lastChatModifiedDate);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.Chat entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.Chat entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(Chat entity) {
        return entity != null && entity.getId() != null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Chat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property ChatGuid = new Property(NumberConstants.INT_1, String.class, "chatGuid", false, "CHAT_GUID");

        public static final Property Type = new Property(NumberConstants.INT_2, Integer.class, "type", false, "TYPE");

        public static final Property Iv = new Property(NumberConstants.INT_3, byte[].class, "iv", false, "IV");

        public static final Property EncryptedData = new Property(NumberConstants.INT_4, byte[].class, "encryptedData", false,
                "ENCRYPTED_DATA");
        public static final Property LastMsgId = new Property(NumberConstants.INT_5, Long.class, "lastMsgId", false, "LAST_MSG_ID");

        public static final Property LastChatModifiedDate = new Property(NumberConstants.INT_6, Long.class, "lastChatModifiedDate", false, "LAST_MODIFIED_DATE");
    }
}
