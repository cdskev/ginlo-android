// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.Preference;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table PREFERENCE.
 */
public class PreferenceDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.Preference, Long> {

    public static final String TABLENAME = "PREFERENCE";

    public PreferenceDao(DaoConfig config) {
        super(config);
    }

    public PreferenceDao(DaoConfig config,
                         AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'PREFERENCE' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'PASSWORD_TYPE' INTEGER,"  // 1: passwordType
                + "'NUMBER_OF_PASSWORD_TRIES' INTEGER,"  // 2: numberOfPasswordTries
                + "'PASSWORD_ENABLED' INTEGER,"  // 3: passwordEnabled
                + "'DELETE_DATA_AFTER_TRIES' INTEGER,"  // 4: deleteDataAfterTries
                + "'ENCRYPTED_DATA' BLOB,"  // 5: encryptedData
                + "'IV' BLOB);");  // 6: iv
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PREFERENCE'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.Preference entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        Integer passwordType = entity.getPasswordType();

        if (passwordType != null) {
            stmt.bindLong(NumberConstants.INT_2, passwordType);
        }

        Integer numberOfPasswordTries = entity.getNumberOfPasswordTries();

        if (numberOfPasswordTries != null) {
            stmt.bindLong(NumberConstants.INT_3, numberOfPasswordTries);
        }

        Boolean passwordEnabled = entity.getPasswordEnabled();

        if (passwordEnabled != null) {
            stmt.bindLong(NumberConstants.INT_4, passwordEnabled ? 1L : 0L);
        }

        Boolean deleteDataAfterTries = entity.getDeleteDataAfterTries();

        if (deleteDataAfterTries != null) {
            stmt.bindLong(NumberConstants.INT_5, deleteDataAfterTries ? 1L : 0L);
        }

        byte[] encryptedData = entity.getEncryptedData();

        if (encryptedData != null) {
            stmt.bindBlob(NumberConstants.INT_6, encryptedData);
        }

        byte[] iv = entity.getIv();

        if (iv != null) {
            stmt.bindBlob(NumberConstants.INT_7, iv);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.Preference readEntity(Cursor cursor,
                                                             int offset) {
        eu.ginlo_apps.ginlo.greendao.Preference entity = new eu.ginlo_apps.ginlo.greendao.Preference(  //
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getInt(offset + NumberConstants.INT_1),  // passwordType
                cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getInt(offset + NumberConstants.INT_2),  // numberOfPasswordTries
                cursor.isNull(offset + NumberConstants.INT_3) ? null : (cursor.getShort(offset + NumberConstants.INT_3) != 0),  // passwordEnabled
                cursor.isNull(offset + NumberConstants.INT_4) ? null : (cursor.getShort(offset + NumberConstants.INT_4) != 0),  // deleteDataAfterTries
                cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getBlob(offset + NumberConstants.INT_5),  // encryptedData
                cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getBlob(offset + NumberConstants.INT_6)  // iv
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.Preference entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setPasswordType(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getInt(offset + NumberConstants.INT_1));
        entity.setNumberOfPasswordTries(cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getInt(offset + NumberConstants.INT_2));
        entity.setPasswordEnabled(cursor.isNull(offset + NumberConstants.INT_3) ? null : (cursor.getShort(offset + NumberConstants.INT_3) != 0));
        entity.setDeleteDataAfterTries(cursor.isNull(offset + NumberConstants.INT_4) ? null : (cursor.getShort(offset + NumberConstants.INT_4) != 0));
        entity.setEncryptedData(cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getBlob(offset + NumberConstants.INT_5));
        entity.setIv(cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getBlob(offset + NumberConstants.INT_6));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.Preference entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        Integer passwordType = entity.getPasswordType();

        if (passwordType != null) {
            stmt.bindLong(NumberConstants.INT_2, passwordType);
        }

        Integer numberOfPasswordTries = entity.getNumberOfPasswordTries();

        if (numberOfPasswordTries != null) {
            stmt.bindLong(NumberConstants.INT_3, numberOfPasswordTries);
        }

        Boolean passwordEnabled = entity.getPasswordEnabled();

        if (passwordEnabled != null) {
            stmt.bindLong(NumberConstants.INT_4, passwordEnabled ? 1L : 0L);
        }

        Boolean deleteDataAfterTries = entity.getDeleteDataAfterTries();

        if (deleteDataAfterTries != null) {
            stmt.bindLong(NumberConstants.INT_5, deleteDataAfterTries ? 1L : 0L);
        }

        byte[] encryptedData = entity.getEncryptedData();

        if (encryptedData != null) {
            stmt.bindBlob(NumberConstants.INT_6, encryptedData);
        }

        byte[] iv = entity.getIv();

        if (iv != null) {
            stmt.bindBlob(NumberConstants.INT_7, iv);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.Preference entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.Preference entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(Preference entity) {
        return entity != null && entity.getId() != null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Preference.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property PasswordType = new Property(NumberConstants.INT_1, Integer.class, "passwordType", false,
                "PASSWORD_TYPE");

        public static final Property NumberOfPasswordTries = new Property(NumberConstants.INT_2, Integer.class, "numberOfPasswordTries",
                false, "NUMBER_OF_PASSWORD_TRIES");

        public static final Property PasswordEnabled = new Property(NumberConstants.INT_3, Boolean.class, "passwordEnabled", false,
                "PASSWORD_ENABLED");

        public static final Property DeleteDataAfterTries = new Property(NumberConstants.INT_4, Boolean.class, "deleteDataAfterTries", false,
                "DELETE_DATA_AFTER_TRIES");

        public static final Property EncryptedData = new Property(NumberConstants.INT_5, byte[].class, "encryptedData", false,
                "ENCRYPTED_DATA");

        public static final Property Iv = new Property(NumberConstants.INT_6, byte[].class, "iv", false, "IV");
    }
}
