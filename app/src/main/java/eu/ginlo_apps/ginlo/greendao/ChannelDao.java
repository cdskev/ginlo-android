// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.Channel;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHANNEL.
 */
public class ChannelDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.Channel, Long> {

    public static final String TABLENAME = "CHANNEL";

    public ChannelDao(DaoConfig config) {
        super(config);
    }

    public ChannelDao(DaoConfig config,
                      AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'CHANNEL' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'GUID' TEXT,"  // 1: guid
                + "'SHORT_DESC' TEXT,"  // 2: shortDesc
                + "'CHANNEL_JSON_OBJECT' TEXT,"  // 3: channelJsonObject
                + "'FILTER_JSON_OBJECT' TEXT,"  // 4: filterJsonObject
                + "'CHECKSUM' TEXT,"  // 5: checksum
                + "'IS_SUBSCRIBED' INTEGER,"  // 6: isSubscribed
                + "'AES_KEY' TEXT,"  // 7: aesKey
                + "'IV' TEXT,"  // 8: iv
                + "'SHORT_LINK_TEXT' TEXT,"  // 9: shortLinkText
                + "'PROMOTION' INTEGER,"  // 10: promotion
                + "'EXTERNAL_URL' TEXT,"  // 11: externalUrl
                + "'SEARCH_TEXT' TEXT,"  // 12: searchText
                + "'CATEGORY' TEXT,"  // 13: category
                + "'DISABLE_NOTIFICATION' INTEGER,"  // 14: disableNotification
                + "'WELCOME_TEXT' TEXT,"  // 15: welcomeText
                + "'SUGGESTION_TEXT' TEXT,"  // 16: suggestionText
                + "'FEEDBACK_CONTACT' TEXT," // 17: feedbackContact
                + "'IS_DELETED' INTEGER,"   // 17: isDeleted
                + "'TYPE' TEXT" // 17: type

                + ");");  // 18. isDeleted
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHANNEL'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.Channel entity) {
        stmt.clearBindings();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String guid = entity.getGuid();

        if (guid != null) {
            stmt.bindString(NumberConstants.INT_2, guid);
        }

        String shortDesc = entity.getShortDesc();

        if (shortDesc != null) {
            stmt.bindString(NumberConstants.INT_3, shortDesc);
        }

        String channelJsonObject = entity.getChannelJsonObject();

        if (channelJsonObject != null) {
            stmt.bindString(NumberConstants.INT_4, channelJsonObject);
        }

        String filterJsonObject = entity.getFilterJsonObject();

        if (filterJsonObject != null) {
            stmt.bindString(NumberConstants.INT_5, filterJsonObject);
        }

        String checksum = entity.getChecksum();

        if (checksum != null) {
            stmt.bindString(NumberConstants.INT_6, checksum);
        }

        Boolean isSubscribed = entity.getIsSubscribed();

        if (isSubscribed != null) {
            stmt.bindLong(NumberConstants.INT_7, isSubscribed ? 1L : 0L);
        }

        String aesKey = entity.getAesKey();

        if (aesKey != null) {
            stmt.bindString(NumberConstants.INT_8, aesKey);
        }

        String iv = entity.getIv();

        if (iv != null) {
            stmt.bindString(NumberConstants.INT_9, iv);
        }

        String shortLinkText = entity.getShortLinkText();

        if (shortLinkText != null) {
            stmt.bindString(NumberConstants.INT_10, shortLinkText);
        }

        Boolean promotion = entity.getPromotion();

        if (promotion != null) {
            stmt.bindLong(NumberConstants.INT_11, promotion ? 1L : 0L);
        }

        String externalUrl = entity.getExternalUrl();

        if (externalUrl != null) {
            stmt.bindString(NumberConstants.INT_12, externalUrl);
        }

        String searchText = entity.getSearchText();

        if (searchText != null) {
            stmt.bindString(NumberConstants.INT_13, searchText);
        }

        String category = entity.getCategory();

        if (category != null) {
            stmt.bindString(NumberConstants.INT_14, category);
        }

        Boolean disableNotification = entity.getDisableNotification();

        if (disableNotification != null) {
            stmt.bindLong(NumberConstants.INT_15, disableNotification ? 1L : 0L);
        }

        String welcomeText = entity.getWelcomeText();

        if (welcomeText != null) {
            stmt.bindString(NumberConstants.INT_16, welcomeText);
        }

        String suggestionText = entity.getSuggestionText();

        if (suggestionText != null) {
            stmt.bindString(NumberConstants.INT_17, suggestionText);
        }

        String feedbackContact = entity.getFeedbackContact();

        if (feedbackContact != null) {
            stmt.bindString(NumberConstants.INT_18, feedbackContact);
        }

        Boolean isDeleted = entity.getIsDeleted();

        if (isDeleted != null) {
            stmt.bindLong(NumberConstants.INT_19, isDeleted ? 1L : 0L);
        }

        String type = entity.getType();

        if (type != null) {
            stmt.bindString(NumberConstants.INT_20, type);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.Channel readEntity(Cursor cursor,
                                                          int offset) {

        return new eu.ginlo_apps.ginlo.greendao.Channel(  //
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1),  // guid
                cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getString(offset + NumberConstants.INT_2),  // shortDesc
                cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getString(offset + NumberConstants.INT_3),  // channelJsonObject
                cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getString(offset + NumberConstants.INT_4),  // filterJsonObject
                cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getString(offset + NumberConstants.INT_5),  // checksum
                cursor.isNull(offset + NumberConstants.INT_6) ? null : (cursor.getShort(offset + NumberConstants.INT_6) != 0),  // isSubscribed
                cursor.isNull(offset + NumberConstants.INT_7) ? null : cursor.getString(offset + NumberConstants.INT_7),  // aesKey
                cursor.isNull(offset + NumberConstants.INT_8) ? null : cursor.getString(offset + NumberConstants.INT_8),  // iv
                cursor.isNull(offset + NumberConstants.INT_9) ? null : cursor.getString(offset + NumberConstants.INT_9),  // shortLinkText
                cursor.isNull(offset + NumberConstants.INT_10) ? null : (cursor.getShort(offset + NumberConstants.INT_10) != 0),  // promotio
                cursor.isNull(offset + NumberConstants.INT_11) ? null : cursor.getString(offset + NumberConstants.INT_11),  // externalUrl
                cursor.isNull(offset + NumberConstants.INT_12) ? null : cursor.getString(offset + NumberConstants.INT_12),  // searchText
                cursor.isNull(offset + NumberConstants.INT_13) ? null : cursor.getString(offset + NumberConstants.INT_13),  // category
                cursor.isNull(offset + NumberConstants.INT_14) ? null : (cursor.getShort(offset + NumberConstants.INT_14) != 0),  // disableNotification
                cursor.isNull(offset + NumberConstants.INT_15) ? null : cursor.getString(offset + NumberConstants.INT_15),  // welcomeText
                cursor.isNull(offset + NumberConstants.INT_16) ? null : cursor.getString(offset + NumberConstants.INT_16),  // suggestionText
                cursor.isNull(offset + NumberConstants.INT_17) ? null : cursor.getString(offset + NumberConstants.INT_17),  // feedbackContact
                cursor.isNull(offset + NumberConstants.INT_18) ? null : (cursor.getShort(offset + NumberConstants.INT_18) != 0),  // disableNotification
                cursor.isNull(offset + NumberConstants.INT_19) ? null : cursor.getString(offset + NumberConstants.INT_19)  // type
        );
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.Channel entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setGuid(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1));
        entity.setShortDesc(cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getString(offset + NumberConstants.INT_2));
        entity.setChannelJsonObject(cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getString(offset + NumberConstants.INT_3));
        entity.setFilterJsonObject(cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getString(offset + NumberConstants.INT_4));
        entity.setChecksum(cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getString(offset + NumberConstants.INT_5));
        entity.setIsSubscribed(cursor.isNull(offset + NumberConstants.INT_6) ? null : (cursor.getShort(offset + NumberConstants.INT_6) != 0));
        entity.setAesKey(cursor.isNull(offset + NumberConstants.INT_7) ? null : cursor.getString(offset + NumberConstants.INT_7));
        entity.setIv(cursor.isNull(offset + NumberConstants.INT_8) ? null : cursor.getString(offset + NumberConstants.INT_8));
        entity.setShortLinkText(cursor.isNull(offset + NumberConstants.INT_9) ? null : cursor.getString(offset + NumberConstants.INT_9));
        entity.setPromotion(cursor.isNull(offset + NumberConstants.INT_10) ? null : (cursor.getShort(offset + NumberConstants.INT_10) != 0));
        entity.setExternalUrl(cursor.isNull(offset + NumberConstants.INT_11) ? null : cursor.getString(offset + NumberConstants.INT_11));
        entity.setSearchText(cursor.isNull(offset + NumberConstants.INT_12) ? null : cursor.getString(offset + NumberConstants.INT_12));
        entity.setCategory(cursor.isNull(offset + NumberConstants.INT_13) ? null : cursor.getString(offset + NumberConstants.INT_13));
        entity.setDisableNotification(cursor.isNull(offset + NumberConstants.INT_14) ? null : (cursor.getShort(offset + NumberConstants.INT_14) != 0));
        entity.setWelcomeText(cursor.isNull(offset + NumberConstants.INT_15) ? null : cursor.getString(offset + NumberConstants.INT_15));
        entity.setSuggestionText(cursor.isNull(offset + NumberConstants.INT_16) ? null : cursor.getString(offset + NumberConstants.INT_16));
        entity.setFeedbackContact(cursor.isNull(offset + NumberConstants.INT_17) ? null : cursor.getString(offset + NumberConstants.INT_17));
        entity.setIsDeleted(cursor.isNull(offset + NumberConstants.INT_18) ? null : (cursor.getShort(offset + NumberConstants.INT_18) != 0));
        entity.setType(cursor.isNull(offset + NumberConstants.INT_19) ? null : cursor.getString(offset + NumberConstants.INT_19));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.Channel entity) {
        stmt.clearBindings();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String guid = entity.getGuid();

        if (guid != null) {
            stmt.bindString(NumberConstants.INT_2, guid);
        }

        String shortDesc = entity.getShortDesc();

        if (shortDesc != null) {
            stmt.bindString(NumberConstants.INT_3, shortDesc);
        }

        String channelJsonObject = entity.getChannelJsonObject();

        if (channelJsonObject != null) {
            stmt.bindString(NumberConstants.INT_4, channelJsonObject);
        }

        String filterJsonObject = entity.getFilterJsonObject();

        if (filterJsonObject != null) {
            stmt.bindString(NumberConstants.INT_5, filterJsonObject);
        }

        String checksum = entity.getChecksum();

        if (checksum != null) {
            stmt.bindString(NumberConstants.INT_6, checksum);
        }

        Boolean isSubscribed = entity.getIsSubscribed();

        if (isSubscribed != null) {
            stmt.bindLong(NumberConstants.INT_7, isSubscribed ? 1L : 0L);
        }

        String aesKey = entity.getAesKey();

        if (aesKey != null) {
            stmt.bindString(NumberConstants.INT_8, aesKey);
        }

        String iv = entity.getIv();

        if (iv != null) {
            stmt.bindString(NumberConstants.INT_9, iv);
        }

        String shortLinkText = entity.getShortLinkText();

        if (shortLinkText != null) {
            stmt.bindString(NumberConstants.INT_10, shortLinkText);
        }

        Boolean promotion = entity.getPromotion();

        if (promotion != null) {
            stmt.bindLong(NumberConstants.INT_11, promotion ? 1L : 0L);
        }

        String externalUrl = entity.getExternalUrl();

        if (externalUrl != null) {
            stmt.bindString(NumberConstants.INT_12, externalUrl);
        }

        String searchText = entity.getSearchText();

        if (searchText != null) {
            stmt.bindString(NumberConstants.INT_13, searchText);
        }

        String category = entity.getCategory();

        if (category != null) {
            stmt.bindString(NumberConstants.INT_14, category);
        }

        Boolean disableNotification = entity.getDisableNotification();

        if (disableNotification != null) {
            stmt.bindLong(NumberConstants.INT_15, disableNotification ? 1L : 0L);
        }

        String welcomeText = entity.getWelcomeText();

        if (welcomeText != null) {
            stmt.bindString(NumberConstants.INT_16, welcomeText);
        }

        String suggestionText = entity.getSuggestionText();

        if (suggestionText != null) {
            stmt.bindString(NumberConstants.INT_17, suggestionText);
        }

        String feedbackContact = entity.getFeedbackContact();

        if (feedbackContact != null) {
            stmt.bindString(NumberConstants.INT_18, feedbackContact);
        }

        Boolean isDeleted = entity.getIsDeleted();

        if (isDeleted != null) {
            stmt.bindLong(NumberConstants.INT_19, isDeleted ? 1L : 0L);
        }

        String type = entity.getType();

        if (type != null) {
            stmt.bindString(NumberConstants.INT_20, type);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.Channel entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.Channel entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(Channel entity) {
        if (entity != null && entity.getId() != null) {
            return true;
        }
        return false;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Channel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property Guid = new Property(NumberConstants.INT_1, String.class, "guid", false, "GUID");

        public static final Property ShortDesc = new Property(NumberConstants.INT_2, String.class, "shortDesc", false,
                "SHORT_DESC");

        public static final Property ChannelJsonObject = new Property(NumberConstants.INT_3, String.class, "channelJsonObject", false,
                "CHANNEL_JSON_OBJECT");

        public static final Property FilterJsonObject = new Property(NumberConstants.INT_4, String.class, "filterJsonObject", false,
                "FILTER_JSON_OBJECT");

        public static final Property Checksum = new Property(NumberConstants.INT_5, String.class, "checksum", false, "CHECKSUM");

        public static final Property IsSubscribed = new Property(NumberConstants.INT_6, Boolean.class, "isSubscribed", false,
                "IS_SUBSCRIBED");

        public static final Property AesKey = new Property(NumberConstants.INT_7, String.class, "aesKey", false, "AES_KEY");

        public static final Property Iv = new Property(NumberConstants.INT_8, String.class, "iv", false, "IV");

        public static final Property ShortLinkText = new Property(NumberConstants.INT_9, String.class, "shortLinkText", false,
                "SHORT_LINK_TEXT");

        public static final Property Promotion = new Property(NumberConstants.INT_10, Boolean.class, "promotion", false,
                "PROMOTION");

        public static final Property ExternalUrl = new Property(NumberConstants.INT_11, String.class, "externalUrl", false,
                "EXTERNAL_URL");

        public static final Property SearchText = new Property(NumberConstants.INT_12, String.class, "searchText", false,
                "SEARCH_TEXT");

        public static final Property Category = new Property(NumberConstants.INT_13, String.class, "category", false, "CATEGORY");

        public static final Property DisableNotification = new Property(NumberConstants.INT_14, Boolean.class, "disableNotification", false,
                "DISABLE_NOTIFICATION");

        public static final Property WelcomeText = new Property(NumberConstants.INT_15, String.class, "welcomeText", false,
                "WELCOME_TEXT");

        public static final Property SuggestionText = new Property(NumberConstants.INT_16, String.class, "suggestionText", false,
                "SUGGESTION_TEXT");

        public static final Property FeedbackContact = new Property(NumberConstants.INT_17, String.class, "feedbackContact", false,
                "FEEDBACK_CONTACT");

        public static final Property IsDeleted = new Property(NumberConstants.INT_18, Boolean.class, "isDeleted", false,
                "IS_DELETED");

        public static final Property Type = new Property(NumberConstants.INT_19, String.class, "type", false,
                "TYPE");
    }
}
