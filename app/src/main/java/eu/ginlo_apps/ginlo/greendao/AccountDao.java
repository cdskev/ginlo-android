// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.Account;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table ACCOUNT.
 */
public class AccountDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.Account, Long> {

    public static final String TABLENAME = "ACCOUNT";

    public AccountDao(DaoConfig config) {
        super(config);
    }

    public AccountDao(DaoConfig config,
                      AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'ACCOUNT' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'PHONE_NUMBER' TEXT,"  // 1: phoneNumber
                + "'DEVICE_GUID' TEXT,"  // 2: deviceGuid
                + "'ACCOUNT_GUID' TEXT,"  // 3: accountGuid
                + "'NAME' TEXT,"  // 4: name
                + "'COUNTRY' TEXT,"  // 5: country
                + "'ENCRYPTED_DATA' BLOB,"  // 6: encryptedData
                + "'IV' BLOB,"  // 7: iv
                + "'STATE' INTEGER," // 8: state
                + "'ACCOUNT_ID' TEXT);");  // 9: Account id
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACCOUNT'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.Account entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String phoneNumber = entity.getPhoneNumber();

        if (phoneNumber != null) {
            stmt.bindString(NumberConstants.INT_2, phoneNumber);
        }

        String deviceGuid = entity.getDeviceGuid();

        if (deviceGuid != null) {
            stmt.bindString(NumberConstants.INT_3, deviceGuid);
        }

        String accountGuid = entity.getAccountGuid();

        if (accountGuid != null) {
            stmt.bindString(NumberConstants.INT_4, accountGuid);
        }

        String name = entity.getName();

        if (name != null) {
            stmt.bindString(NumberConstants.INT_5, name);
        }

        String country = entity.getCountry();

        if (country != null) {
            stmt.bindString(NumberConstants.INT_6, country);
        }

        byte[] encryptedData = entity.getEncryptedData();

        if (encryptedData != null) {
            stmt.bindBlob(NumberConstants.INT_7, encryptedData);
        }

        byte[] iv = entity.getIv();

        if (iv != null) {
            stmt.bindBlob(NumberConstants.INT_8, iv);
        }

        Integer state = entity.getState();

        if (state != null) {
            stmt.bindLong(NumberConstants.INT_9, state);
        }

        String accountID = entity.getAccountID();

        if (accountID != null) {
            stmt.bindString(NumberConstants.INT_10, accountID);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.Account readEntity(Cursor cursor,
                                                          int offset) {
        eu.ginlo_apps.ginlo.greendao.Account entity = new eu.ginlo_apps.ginlo.greendao.Account(  //
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1),  // phoneNumber
                cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getString(offset + NumberConstants.INT_2),  // deviceGuid
                cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getString(offset + NumberConstants.INT_3),  // accountGuid
                cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getString(offset + NumberConstants.INT_4),  // name
                cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getString(offset + NumberConstants.INT_5),  // country
                cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getBlob(offset + NumberConstants.INT_6),  // encryptedData
                cursor.isNull(offset + NumberConstants.INT_7) ? null : cursor.getBlob(offset + NumberConstants.INT_7),  // iv
                cursor.isNull(offset + NumberConstants.INT_8) ? null : cursor.getInt(offset + NumberConstants.INT_8),  // state
                cursor.isNull(offset + NumberConstants.INT_9) ? null : cursor.getString(offset + NumberConstants.INT_9)  // accountId
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.Account entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setPhoneNumber(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1));
        entity.setDeviceGuid(cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getString(offset + NumberConstants.INT_2));
        entity.setAccountGuid(cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getString(offset + NumberConstants.INT_3));
        entity.setName(cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getString(offset + NumberConstants.INT_4));
        entity.setCountry(cursor.isNull(offset + NumberConstants.INT_5) ? null : cursor.getString(offset + NumberConstants.INT_5));
        entity.setEncryptedData(cursor.isNull(offset + NumberConstants.INT_6) ? null : cursor.getBlob(offset + NumberConstants.INT_6));
        entity.setIv(cursor.isNull(offset + NumberConstants.INT_7) ? null : cursor.getBlob(offset + NumberConstants.INT_7));
        entity.setState(cursor.isNull(offset + NumberConstants.INT_8) ? 0 : cursor.getInt(offset + NumberConstants.INT_8));
        entity.setAccountGuid(cursor.isNull(offset + NumberConstants.INT_9) ? null : cursor.getString(offset + NumberConstants.INT_9));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.Account entity) {
        stmt.clearBindings();
        entity.beforeSafe();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String phoneNumber = entity.getPhoneNumber();

        if (phoneNumber != null) {
            stmt.bindString(NumberConstants.INT_2, phoneNumber);
        }

        String deviceGuid = entity.getDeviceGuid();

        if (deviceGuid != null) {
            stmt.bindString(NumberConstants.INT_3, deviceGuid);
        }

        String accountGuid = entity.getAccountGuid();

        if (accountGuid != null) {
            stmt.bindString(NumberConstants.INT_4, accountGuid);
        }

        String name = entity.getName();

        if (name != null) {
            stmt.bindString(NumberConstants.INT_5, name);
        }

        String country = entity.getCountry();

        if (country != null) {
            stmt.bindString(NumberConstants.INT_6, country);
        }

        byte[] encryptedData = entity.getEncryptedData();

        if (encryptedData != null) {
            stmt.bindBlob(NumberConstants.INT_7, encryptedData);
        }

        byte[] iv = entity.getIv();

        if (iv != null) {
            stmt.bindBlob(NumberConstants.INT_8, iv);
        }

        Integer state = entity.getState();

        if (state != null) {
            stmt.bindLong(NumberConstants.INT_9, state);
        }

        String accountID = entity.getAccountID();

        if (accountID != null) {
            stmt.bindString(NumberConstants.INT_10, accountID);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.Account entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.Account entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(Account entity) {
        if (entity != null && entity.getId() != null) {
            return true;
        }
        return false;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    private static class Properties {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property PhoneNumber = new Property(NumberConstants.INT_1, String.class, "phoneNumber", false, "PHONE_NUMBER");

        public static final Property DeviceGuid = new Property(NumberConstants.INT_2, String.class, "deviceGuid", false, "DEVICE_GUID");

        public static final Property AccountGuid = new Property(NumberConstants.INT_3, String.class, "accountGuid", false, "ACCOUNT_GUID");

        public static final Property Name = new Property(NumberConstants.INT_4, String.class, "name", false, "NAME");

        public static final Property Country = new Property(NumberConstants.INT_5, String.class, "country", false, "COUNTRY");

        public static final Property EncryptedData = new Property(NumberConstants.INT_6, byte[].class, "encryptedData", false,
                "ENCRYPTED_DATA");

        public static final Property Iv = new Property(NumberConstants.INT_7, byte[].class, "iv", false, "IV");

        public static final Property State = new Property(NumberConstants.INT_8, Integer.class, "state", false, "STATE");

        public static final Property AccountId = new Property(NumberConstants.INT_9, String.class, "accountID", false, "ACCOUNT_ID");
    }
}
