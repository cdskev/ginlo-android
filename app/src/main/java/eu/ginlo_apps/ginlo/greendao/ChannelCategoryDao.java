// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.ChannelCategory;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table CHANNEL_CATEGORY.
 */
public class ChannelCategoryDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.ChannelCategory, Long> {

    public static final String TABLENAME = "CHANNEL_CATEGORY";

    public ChannelCategoryDao(DaoConfig config) {
        super(config);
    }

    public ChannelCategoryDao(DaoConfig config,
                              AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'CHANNEL_CATEGORY' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'IDENT' TEXT,"  // 1: ident
                + "'TITLE_KEY' TEXT,"  // 2: titleKey
                + "'IMAGE_KEY' TEXT,"  // 3: imageKey
                + "'ITEMS' TEXT);");  // 4: items
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHANNEL_CATEGORY'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.ChannelCategory entity) {
        stmt.clearBindings();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String ident = entity.getIdent();

        if (ident != null) {
            stmt.bindString(NumberConstants.INT_2, ident);
        }

        String titleKey = entity.getTitleKey();

        if (titleKey != null) {
            stmt.bindString(NumberConstants.INT_3, titleKey);
        }

        String imageKey = entity.getImageKey();

        if (imageKey != null) {
            stmt.bindString(NumberConstants.INT_4, imageKey);
        }

        String items = entity.getItems();

        if (items != null) {
            stmt.bindString(NumberConstants.INT_5, items);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.ChannelCategory readEntity(Cursor cursor,
                                                                  int offset) {

        return new eu.ginlo_apps.ginlo.greendao.ChannelCategory(
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1),  // ident
                cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getString(offset + NumberConstants.INT_2),  // titleKey
                cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getString(offset + NumberConstants.INT_3),  // imageKey
                cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getString(offset + NumberConstants.INT_4)  // items
        );
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.ChannelCategory entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setIdent(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1));
        entity.setTitleKey(cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getString(offset + NumberConstants.INT_2));
        entity.setImageKey(cursor.isNull(offset + NumberConstants.INT_3) ? null : cursor.getString(offset + NumberConstants.INT_3));
        entity.setItems(cursor.isNull(offset + NumberConstants.INT_4) ? null : cursor.getString(offset + NumberConstants.INT_4));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.ChannelCategory entity) {
        stmt.clearBindings();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String ident = entity.getIdent();

        if (ident != null) {
            stmt.bindString(NumberConstants.INT_2, ident);
        }

        String titleKey = entity.getTitleKey();

        if (titleKey != null) {
            stmt.bindString(NumberConstants.INT_3, titleKey);
        }

        String imageKey = entity.getImageKey();

        if (imageKey != null) {
            stmt.bindString(NumberConstants.INT_4, imageKey);
        }

        String items = entity.getItems();

        if (items != null) {
            stmt.bindString(NumberConstants.INT_5, items);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.ChannelCategory entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.ChannelCategory entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(ChannelCategory entity) {
        return entity != null && entity.getId() != null;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity ChannelCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    private static class Properties
    {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property Ident = new Property(NumberConstants.INT_1, String.class, "ident", false, "IDENT");

        public static final Property TitleKey = new Property(NumberConstants.INT_2, String.class, "titleKey", false, "TITLE_KEY");

        public static final Property ImageKey = new Property(NumberConstants.INT_3, String.class, "imageKey", false, "IMAGE_KEY");

        public static final Property Items = new Property(NumberConstants.INT_4, String.class, "items", false, "ITEMS");
    }
}
