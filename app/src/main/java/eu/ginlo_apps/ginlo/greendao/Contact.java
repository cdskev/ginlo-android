// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.util.Base64;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import eu.ginlo_apps.ginlo.exception.LocalizedException;
import eu.ginlo_apps.ginlo.greendao.AbstractSecureModel;
import eu.ginlo_apps.ginlo.greendao.GreenDAOSecurityLayer;
import eu.ginlo_apps.ginlo.log.LogUtil;
import eu.ginlo_apps.ginlo.model.constant.JsonConstants;
import static eu.ginlo_apps.ginlo.model.constant.JsonConstants.OOO_STATUS_STATE;
import static eu.ginlo_apps.ginlo.model.constant.JsonConstants.OOO_STATUS_STATE_OOO;
import static eu.ginlo_apps.ginlo.model.constant.JsonConstants.OOO_STATUS_STATE_VALID;
import eu.ginlo_apps.ginlo.util.JsonUtil;
import eu.ginlo_apps.ginlo.util.PhoneNumberUtil;
import eu.ginlo_apps.ginlo.util.StringUtil;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import org.jetbrains.annotations.NotNull;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

public class Contact
        extends AbstractSecureModel
        implements java.io.Serializable,
        Comparable<Contact> {

    public static final int STATE_UNSIMSABLE = 0;

    public static final int STATE_LOW_TRUST = 1;

    public static final int STATE_MIDDLE_TRUST = 2;

    public static final int STATE_HIGH_TRUST = 3;

    public static final int STATE_SIMSME_SYSTEM = 4;
    /**
     * Privates Verzeichnis: Privater Eintrag (normaler Kontakt)
     */
    public static final String CLASS_PRIVATE_ENTRY = "PrivateIndexEntry";
    /**
     * Privates Verzeichnis: Company Eintrag (versteckter Firmen Eintrag )
     */
    public static final String CLASS_COMPANY_ENTRY = "CompanyIndexEntry";
    /**
     * Privates Verzeichnis: Domain Eintrag (versteckter E-Mail-Domain Eintrag )
     */
    public static final String CLASS_DOMAIN_ENTRY = "DomainIndexEntry";
    /**
     * Privates Verzeichnis: Eigener Eintrag (versteckter Eintrag des eignen Accounts )
     */
    public static final String CLASS_OWN_ACCOUNT_ENTRY = "OwnAccountEntry";
    private static final int VERSION_OLD_CONTACT = 1;
    private static final String SILENT_TILL = "silentTill";

    private static final String TRUST_STATE_NONE = "none";
    private static final String TRUST_STATE_LOW = "low";
    private static final String TRUST_STATE_MEDIUM = "medium";
    private static final String TRUST_STATE_HIGH = "high";

    private static final String CONFIRMED_STATE_UNCONFIRMED = "unconfirmed";
    private static final String CONFIRMED_STATE_CONFIRMED = "unblocked";
    private static final String CONFIRMED_STATE_BLOCKED = "blocked";

    private Long mId;
    private String mAccountGuid;
    private String mLookupKey;
    private String mHash;
    private String mBcrypt;
    private String mPublicKey;
    private Long mTimestamp;
    private Long mLastKnownRowId;
    private Boolean mIsHidden;
    private Boolean mIsFirstContact;
    private Boolean mIsBlocked;
    private Boolean mIsReadonly;
    private Boolean mIsSimsMeContact;
    private byte[] mEncryptedData;
    private byte[] mIv;
    private String mMandant;
    private String mChecksum;
    private String mAttributes;
    private Long mVersion;
    private JsonObject mAttributesJO;
    private String mSimsmeId;
    private Boolean mTempReadonly;

    /**
     * tempor√§re Zeit, wann der Kontakt zuletzt online
     */
    private Long mLastOnlineTime;

    // KEEP FIELDS - put your custom fields here

    // KEEP FIELDS END

    public Contact() {
    }

    public Contact(Long id) {
        this.mId = id;
    }

    public Contact(final Contact contact) {
        this(contact.mId,
                contact.mAccountGuid,
                contact.mLookupKey,
                contact.mHash,
                contact.mBcrypt,
                contact.mPublicKey,
                contact.mTimestamp,
                contact.mLastKnownRowId,
                contact.mIsHidden,
                contact.mIsFirstContact,
                contact.mIsBlocked,
                contact.mIsSimsMeContact,
                contact.mEncryptedData,
                contact.mIv,
                contact.mMandant,
                contact.mChecksum,
                contact.mAttributes,
                contact.mVersion
        );
    }

    public Contact(String firstName, String lastName) {
        try {
            initFirstName(firstName);
            initLastName(lastName);
        } catch (LocalizedException e) {
            LogUtil.e(this.getClass().getSimpleName(), e.toString());
        }
    }

    public Contact(Long id,
                   String accountGuid,
                   String lookupKey,
                   String hash,
                   String bcrypt,
                   String publicKey,
                   Long timestamp,
                   Long lastKnownRowId,
                   Boolean isHidden,
                   Boolean isFirstContact,
                   Boolean isBlocked,
                   Boolean isSimsMeContact,
                   byte[] encryptedData,
                   byte[] iv,
                   String mandant,
                   String checksum,
                   String attributes,
                   Long version
    ) {
        this.mId = id;
        this.mAccountGuid = accountGuid;
        this.mLookupKey = lookupKey;
        this.mHash = hash;
        this.mBcrypt = bcrypt;
        this.mPublicKey = publicKey;
        this.mTimestamp = timestamp;
        this.mLastKnownRowId = lastKnownRowId;
        this.mIsHidden = isHidden;
        this.mIsFirstContact = isFirstContact;
        this.mIsBlocked = isBlocked;
        this.mIsSimsMeContact = isSimsMeContact;
        if (encryptedData != null) {
            this.mEncryptedData = encryptedData.clone();
        }
        if (iv != null) {
            this.mIv = iv.clone();
        }
        this.mMandant = mandant;
        this.mChecksum = checksum;
        this.mAttributes = attributes;
        this.mVersion = version;
    }

    @Override
    public void beforeSafe() {
        super.beforeSafe();

        if (mAttributesJO != null) {
            mAttributes = mAttributesJO.toString();
        }
    }

    public String getMandant() {
        synchronized (this) {
            return mMandant;
        }
    }

    public void setMandant(final String mandant) {
        synchronized (this) {
            this.mMandant = mandant;
        }
    }

    // KEEP METHODS - put your custom methods here

    public Contact cloneContact()
            throws LocalizedException {
        Contact contact = new Contact();

        contact.setAccountGuid(getAccountGuid());
        contact.setBcrypt(getBcrypt());
        contact.setEncryptedData(getEncryptedData());
        contact.setHash(getHash());
        contact.setIsBlocked(getIsBlocked());
        contact.setIsReadOnly(getIsReadOnly());
        contact.setIsFirstContact(getIsFirstContact());
        contact.setIsHidden(getIsHidden());
        contact.setIv(getIv());
        contact.setLastKnownRowId(getLastKnownRowId());
        contact.setLastName(getLastName());
        contact.setFirstName(getFirstName());
        contact.setMiddleName(getMiddleName());
        contact.setNamePrefix(getNamePrefix());
        contact.setNameSuffix(getNameSuffix());
        contact.setDisplayName(getDisplayName());
        contact.setLookupKey(getLookupKey());
        contact.setNickname(getNickname());
        contact.setState(getState());
        contact.setStatusText(getStatusText());
        contact.setTimestamp(getTimestamp());
        contact.setIsSimsMeContact(getIsSimsMeContact());
        contact.setPhoneNumber(contact.getPhoneNumber());
        contact.setProfileInfoAesKey(getProfileInfoAesKey());
        contact.setProfileImageChecksum(getProfileImageChecksum());
        contact.setMandant(getMandant());

        return contact;
    }

    public String getFirstName()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "firstName");

            return (o != null) ? (String) o : null;
        }
    }

    public void setFirstName(String firstName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "firstName", firstName);
        }
    }

    private void initFirstName(String firstName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "firstName", firstName);
        }
    }

    public String getLastName()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "lastName");

            return (o != null) ? (String) o : null;
        }
    }

    public void setLastName(String lastName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "lastName", lastName);
        }
    }

    private void initLastName(String lastName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "lastName", lastName);
        }
    }

    private String getMiddleName()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "middleName");

            return (o != null) ? (String) o : null;
        }
    }

    public void setMiddleName(String middleName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "middleName", middleName);
        }
    }

    private String getNameSuffix()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "suffix");

            return (o != null) ? (String) o : null;
        }
    }

    public void setNameSuffix(String suffix)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "suffix", suffix);
        }
    }

    private String getNamePrefix()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "namePrefix");

            return (o != null) ? (String) o : null;
        }
    }

    public void setNamePrefix(String prefix)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "namePrefix", prefix);
        }
    }

    public String getDisplayName()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "displayName");

            return (o != null) ? (String) o : null;
        }
    }

    public void setDisplayName(String displayName)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "displayName", displayName);
        }
    }

    public String getPhotoUri()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "photoUri");

            return (o != null) ? (String) o : null;
        }
    }

    public String getFromKey2()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "fromKey2");

            return (o != null) ? (String) o : null;
        }
    }

    public void setFromKey2(String fromKey2)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "fromKey2", fromKey2);
        }
    }

    public String getToKey2()
            throws LocalizedException {
        synchronized (this) {
            Object o = GreenDAOSecurityLayer.getInstance().get(this, "toKey2");

            return (o != null) ? (String) o : null;
        }
    }

    public void setToKey2(String toKey2)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "toKey2", toKey2);
        }
    }

    public Object getKey2()
            throws LocalizedException {
        synchronized (this) {
            String keybBytesString = (String) GreenDAOSecurityLayer.getInstance().get(this, "key2");
            if (keybBytesString == null) {
                return null;
            } else {
                byte[] aesKeyBytes = Base64.decode(keybBytesString, Base64.DEFAULT);
                return new SecretKeySpec(aesKeyBytes, 0, aesKeyBytes.length, "AES");
            }
        }
    }

    public void setKey2(SecretKey key2)
            throws LocalizedException {
        synchronized (this) {
            final String keyString;
            if (key2 == null) {
                keyString = null;
            } else {
                byte[] aesKeyBytes = key2.getEncoded();
                keyString = Base64.encodeToString(aesKeyBytes, Base64.NO_WRAP);
            }
            GreenDAOSecurityLayer.getInstance().set(this, "key2", keyString);
        }
    }

    @Nullable
    public String getSimsmeId()
            throws LocalizedException {
        if (StringUtil.isNullOrEmpty(mSimsmeId)) {
            mSimsmeId = (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.ACCOUNT_ID);
        }
        return mSimsmeId;
    }

    public void setSimsmeId(final String simsmeId)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.ACCOUNT_ID, simsmeId);
        mSimsmeId = simsmeId;
    }

    @Override
    public int hashCode() {
        synchronized (this) {
            String str = this.getClass().getName() + "-" + getId();

            return str.hashCode();
        }
    }

    @Override
    public boolean equals(Object other) {
        if (!(other instanceof Contact)) {
            return false;
        }
        Long id1 = getId();
        Long id2 = ((Contact) other).getId();
        if (id1 == null || id2 == null) {
            return ((id1 != null) == (id2 != null));
        }
        return (id1.longValue() == id2.longValue());
    }

    public String getStatusText()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "statusText");
        }
    }

    public void setStatusText(String status)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "statusText", status);
        }
    }

    public String getOooStatus()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.OOO_STATUS);
        }
    }

    public void setOooStatus(final String oooStatus)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.OOO_STATUS, oooStatus);
        }
    }

    public boolean isAbsent()
            throws LocalizedException {
        boolean isAbsent;

        final String oooStatusJsonAsString = getOooStatus();
        if (!StringUtil.isNullOrEmpty(oooStatusJsonAsString)) {
            final JsonParser jsonParser = new JsonParser();
            final JsonObject jsonObject = jsonParser.parse(oooStatusJsonAsString).getAsJsonObject();

            if (JsonUtil.hasKey(OOO_STATUS_STATE, jsonObject)) {
                final String absentState = jsonObject.get(OOO_STATUS_STATE).getAsString();
                isAbsent = (StringUtil.isEqual(absentState, OOO_STATUS_STATE_OOO));
            } else {
                isAbsent = false;
            }
        } else {
            isAbsent = false;
        }
        return isAbsent;
    }

    public String getAbsenceTimeUtcString()
            throws LocalizedException {
        final String oooStatusJsonAsString = getOooStatus();
        if (!StringUtil.isNullOrEmpty(oooStatusJsonAsString)) {
            final JsonParser jsonParser = new JsonParser();
            final JsonObject jsonObject = jsonParser.parse(oooStatusJsonAsString).getAsJsonObject();

            if (JsonUtil.hasKey(OOO_STATUS_STATE_VALID, jsonObject)) {
                return jsonObject.get(OOO_STATUS_STATE_VALID).getAsString();
            } else {
                return null;
            }
        } else {
            return null;
        }
    }

    public Integer getState()
            throws LocalizedException {
        synchronized (this) {
            final Integer state = (Integer) GreenDAOSecurityLayer.getInstance().get(this, "state");
            if (state == null) {
                return STATE_LOW_TRUST;
            } else {
                return state;
            }
        }
    }

    public void setState(Integer state)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "state", state);
        }
    }

    public String getNickname()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "nickname");
        }
    }

    public void setNickname(String nickname)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "nickname", nickname);
        }
    }

    public String getNameFromNameAttributes()
            throws LocalizedException {

        String displayName = getDisplayName();

        if (!StringUtil.isNullOrEmpty(displayName)) {
            return displayName;
        }

        String returnValue = "";
        String prefix = getNamePrefix();
        String lastName = getLastName();
        String firstName = getFirstName();
        String middleName = getMiddleName();
        String suffix = getNameSuffix();
        String nickName = getNickname();

        if (!StringUtil.isNullOrEmpty(prefix)) {
            returnValue = prefix;
        }

        if (!StringUtil.isNullOrEmpty(firstName)) {
            returnValue = (returnValue.length() > 0) ? (returnValue + " " + firstName) : firstName;
        }

        if (!StringUtil.isNullOrEmpty(middleName)) {
            returnValue = (returnValue.length() > 0) ? (returnValue + " " + middleName) : middleName;
        }

        if (!StringUtil.isNullOrEmpty(lastName)) {
            returnValue = (returnValue.length() > 0) ? (returnValue + " " + lastName) : lastName;
        }

        if (!StringUtil.isNullOrEmpty(suffix)) {
            returnValue = (returnValue.length() > 0) ? (returnValue + ", " + suffix) : "";
        }

        if (StringUtil.isNullOrEmpty(returnValue) && !StringUtil.isNullOrEmpty(nickName)) {
            returnValue = nickName;
        }

        return returnValue;
    }

    /**
     * Liefert den Anzeigename des Kontaktes zur√ºck. Wenn kein Name verf√ºgbar
     * ist, wird die Telefonnummer zur√ºckgegeben.
     *
     * @return Anzeigename
     */
    public String getName()
            throws LocalizedException {
        String returnValue = "";
        String displayName = getDisplayName();

        if ((displayName == null) || (displayName.length() < 1)) {
            String prefix = getNamePrefix();
            String lastName = getLastName();
            String firstName = getFirstName();
            String middleName = getMiddleName();
            String suffix = getNameSuffix();
            String nickName = getNickname();
            String phoneNumber = getPhoneNumber();
            String simsmeID = getSimsmeId();

            if (!StringUtil.isNullOrEmpty(prefix)) {
                returnValue = prefix;
            }

            if (!StringUtil.isNullOrEmpty(firstName)) {
                returnValue = (returnValue.length() > 0) ? (returnValue + " " + firstName) : firstName;
            }

            if (!StringUtil.isNullOrEmpty(middleName)) {
                returnValue = (returnValue.length() > 0) ? (returnValue + " " + middleName) : middleName;
            }

            if (!StringUtil.isNullOrEmpty(lastName)) {
                returnValue = (returnValue.length() > 0) ? (returnValue + " " + lastName) : lastName;
            }

            if (!StringUtil.isNullOrEmpty(suffix)) {
                returnValue = (returnValue.length() > 0) ? (returnValue + ", " + suffix) : "";
            }

            if (StringUtil.isNullOrEmpty(returnValue) && !StringUtil.isNullOrEmpty(nickName)) {
                returnValue = nickName;
            }

            if (StringUtil.isNullOrEmpty(returnValue) && !StringUtil.isNullOrEmpty(simsmeID)) {
                returnValue = simsmeID;
            }

            if (StringUtil.isNullOrEmpty(returnValue) && !StringUtil.isNullOrEmpty(phoneNumber)) {
                returnValue = phoneNumber;
            }

            return returnValue;
        }

        return displayName;
    }

    public String getIdentName()
            throws LocalizedException {
        String lastName = getLastName();
        String firstName = getFirstName();
        String nickName = getNickname();
        String phoneNumber = getPhoneNumber();

        if ((lastName == null) || (lastName.length() == 0)) {
            if ((firstName == null) || (firstName.length() == 0)) {
                if ((nickName == null) || (nickName.length() == 0)) {
                    if ((phoneNumber == null) || (phoneNumber.length() == 0)) {
                        return "";
                    } else {
                        return phoneNumber;
                    }
                } else {
                    return nickName;
                }
            } else {
                return firstName;
            }
        } else {
            return lastName;
        }
    }

    public boolean findString(@NotNull String name)
            throws LocalizedException {
        String searchString = name.toLowerCase();

        if (containsString(getLastName(), searchString))
            return true;

        if (containsString(getFirstName(), searchString))
            return true;

        if (containsString(getDisplayName(), searchString))
            return true;

        if (containsString(getNameFromNameAttributes(), searchString))
            return true;

        if (containsString(getNickname(), searchString))
            return true;

        if (containsString(getPhoneNumber(), searchString))
            return true;

        if (containsString(getEmail(), searchString))
            return true;

        if (containsString(getDomain(), searchString))
            return true;

        return containsString(getSimsmeId(), searchString);
    }

    private boolean containsString(String source, String what) {
        return source != null && source.toLowerCase().contains(what);
    }

    @Override
    public String toString() {
        //(fpl) Bitte keine aufrufe hier t√§tigen die zu einer entschl√ºsselung f√ºhrt. z.b. getname()
        return "Contact (ID: " + getId() + " )";
    }

    @Override
    public int compareTo(Contact contact) {
        if ((contact.getId() == null) && (this.getId() == null)) {
            return 0;
        } else if ((contact.getId() == null) && (this.getId() != null)) {
            return -1;
        } else if ((contact.getId() != null) && (this.getId() == null)) {
            return 1;
        } else if (contact.getId() < this.getId()) {
            return -1;
        } else if (contact.getId() > this.getId()) {
            return 1;
        } else {
            return 0;
        }
    }

    // Wurde der Account inaktiv geschaltet, weil er auf dem Server gl√∂scht wurde

    public void setIsDeletedHidden(boolean bDelete)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "IsDeletedHidden", bDelete);
        }
    }

    public boolean isDeletedHidden()
            throws LocalizedException {
        synchronized (this) {
            Boolean bRc = (Boolean) GreenDAOSecurityLayer.getInstance().get(this, "IsDeletedHidden");

            if (bRc == null) {
                return false;
            }
            return bRc.booleanValue();
        }
    }

    public void setHasNewerContact(boolean hasNewerContact)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "HasNewerContact", hasNewerContact);
        }
    }

    public void clearPhoneNumber()
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "phoneNumber", "");
        }
    }

    public String getPhoneNumber()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "phoneNumber");
        }
    }

    public void setPhoneNumber(String phoneNumber)
            throws LocalizedException {
        synchronized (this) {
            // hier kann u.u. die simsme-id stehen
            if (PhoneNumberUtil.isNormalizedPhoneNumber(phoneNumber)) {
                GreenDAOSecurityLayer.getInstance().set(this, "phoneNumber", phoneNumber);
            }
        }
    }

    public String getCountryCode() {
        synchronized (this) {
            try {

                String phoneNumber = getPhoneNumber();

                if(StringUtil.isNullOrEmpty(phoneNumber))
                    return null;

                String[] validCountryCodes = new String[]
                        {
                                "+999",
                                "+49",
                                "+44",
                                "+39",
                                "+34",
                                "+1",
                                "+93",
                                "+20",
                                "+358",
                                "+355",
                                "+213",
                                "+1",
                                "+1",
                                "+376",
                                "+244",
                                "+1",
                                "+1",
                                "+240",
                                "+54",
                                "+374",
                                "+297",
                                "+247",
                                "+994",
                                "+251",
                                "+61",
                                "+1",
                                "+973",
                                "+880",
                                "+1",
                                "+32",
                                "+501",
                                "+229",
                                "+1",
                                "+975",
                                "+591",
                                "+387",
                                "+267",
                                "+55",
                                "+1",
                                "+673",
                                "+359",
                                "+226",
                                "+257",
                                "+1",
                                "+56",
                                "+86",
                                "+682",
                                "+506",
                                "+45",
                                "+253",
                                "+1",
                                "+1",
                                "+593",
                                "+503",
                                "+291",
                                "+372",
                                "+500",
                                "+298",
                                "+679",
                                "+358",
                                "+691",
                                "+33",
                                "+594",
                                "+689",
                                "+241",
                                "+220",
                                "+995",
                                "+233",
                                "+350",
                                "+1",
                                "+30",
                                "+299",
                                "+590",
                                "+1",
                                "+502",
                                "+224",
                                "+245",
                                "+592",
                                "+509T",
                                "+61",
                                "+504",
                                "+852",
                                "+91",
                                "+62",
                                "+964",
                                "+98",
                                "+353",
                                "+354",
                                "+44",
                                "+972",
                                "+1",
                                "+81",
                                "+967",
                                "+962",
                                "+855",
                                "+237",
                                "+1",
                                "+238",
                                "+7",
                                "+254",
                                "+686",
                                "+672",
                                "+57",
                                "+269",
                                "+242",
                                "+243",
                                "+385",
                                "+53",
                                "+965",
                                "+996",
                                "+856",
                                "+266S",
                                "+371",
                                "+961",
                                "+231",
                                "+218",
                                "+423",
                                "+370",
                                "+352",
                                "+853",
                                "+261",
                                "+265",
                                "+60",
                                "+960",
                                "+223",
                                "+356",
                                "+212",
                                "+692",
                                "+596",
                                "+222",
                                "+230",
                                "+269",
                                "+389",
                                "+52",
                                "+258",
                                "+373",
                                "+377",
                                "+976",
                                "+382",
                                "+1",
                                "+95",
                                "+264",
                                "+674",
                                "+977",
                                "+687",
                                "+64",
                                "+505",
                                "+31",
                                "+599",
                                "+227",
                                "+234",
                                "+683",
                                "+1",
                                "+672",
                                "+47",
                                "+968",
                                "+670",
                                "+43",
                                "+82",
                                "+970",
                                "+680",
                                "+507",
                                "+675",
                                "+595",
                                "+51",
                                "+63",
                                "+649",
                                "+48",
                                "+351",
                                "+1",
                                "+974",
                                "+262",
                                "+250",
                                "+40",
                                "+7",
                                "+677",
                                "+260",
                                "+685",
                                "+378",
                                "+239",
                                "+966",
                                "+46",
                                "+41",
                                "+221",
                                "+381",
                                "+248",
                                "+232",
                                "+65",
                                "+421",
                                "+386",
                                "+47",
                                "+252",
                                "+94",
                                "+1",
                                "+1",
                                "+1",
                                "+508",
                                "+27",
                                "+249",
                                "+500",
                                "+82",
                                "+211",
                                "+597",
                                "+268",
                                "+963",
                                "+992",
                                "+886",
                                "+255",
                                "+66",
                                "+228",
                                "+690",
                                "+676",
                                "+1",
                                "+235",
                                "+420",
                                "+216",
                                "+90",
                                "+993",
                                "+1",
                                "+688",
                                "+256",
                                "+380",
                                "+36",
                                "+598",
                                "+998",
                                "+678",
                                "+379",
                                "+58",
                                "+971",
                                "+84",
                                "+681",
                                "+672",
                                "+375",
                                "+212",
                                "+236",
                                "+263",
                                "+357",
                                "+92",
                                "+290"
                        };

                for (int i = 0; i < validCountryCodes.length; i++) {
                    if (phoneNumber.startsWith(validCountryCodes[i])) {
                        return validCountryCodes[i];
                    }
                }
                return null;

            } catch (LocalizedException ex) {
                return null;
            }
        }
    }

    public String getProfileInfoAesKey()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "profileInfoAesKey");
        }
    }

    /**
     * key zum Entschluesseln des Status usw
     *
     * @param aesKey Base64 AES Key String
     */
    public void setProfileInfoAesKey(String aesKey)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "profileInfoAesKey", aesKey);
        }
    }

    public String getProfileImageChecksum()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "profileImageChecksum");
        }
    }

    public void setProfileImageChecksum(String checksum)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "profileImageChecksum", checksum);
        }
    }

    public String getEncryptedStatusText()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "statusTextEncrypted");
        }
    }

    public void setEncryptedStatusText(String status)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "statusTextEncrypted", status);
        }
    }

    public String getEncryptedNickname()
            throws LocalizedException {
        synchronized (this) {
            return (String) GreenDAOSecurityLayer.getInstance().get(this, "nicknameEncrypted");
        }
    }

    public void setEncryptedNickname(String nickname)
            throws LocalizedException {
        synchronized (this) {
            GreenDAOSecurityLayer.getInstance().set(this, "nicknameEncrypted", nickname);
        }
    }

    public Long getId() {
        synchronized (this) {
            return mId;
        }
    }

    public void setId(Long id) {
        synchronized (this) {
            this.mId = id;
        }
    }

    public String getAccountGuid() {
        synchronized (this) {
            return mAccountGuid;
        }
    }

    public void setAccountGuid(String accountGuid) {
        synchronized (this) {
            this.mAccountGuid = accountGuid;
        }
    }

    public String getLookupKey() {
        synchronized (this) {
            return mLookupKey;
        }
    }

    public void setLookupKey(String lookupKey) {
        synchronized (this) {
            this.mLookupKey = lookupKey;
        }
    }

    public String getHash() {
        synchronized (this) {
            return mHash;
        }
    }

    public void setHash(String hash) {
        synchronized (this) {
            this.mHash = hash;
        }
    }

    public String getBcrypt() {
        synchronized (this) {
            return mBcrypt;
        }
    }

    public void setBcrypt(String bcrypt) {
        synchronized (this) {
            this.mBcrypt = bcrypt;
        }
    }

    @Nullable
    public String getBcryptForMandant(@NonNull String salt) {
        synchronized (this) {
            if (StringUtil.isNullOrEmpty(this.mBcrypt)) {
                return null;
            }

            JsonObject jsonObject = JsonUtil.getJsonObjectFromString(this.mBcrypt);

            if (jsonObject == null) {
                return null;
            }

            return JsonUtil.stringFromJO(salt, jsonObject);
        }
    }

    public void setBcryptForSalt(@NonNull String salt, @NonNull String bcrypt) {
        synchronized (this) {
            JsonObject jsonObject;
            if (StringUtil.isNullOrEmpty(this.mBcrypt)) {
                jsonObject = new JsonObject();
            } else {
                jsonObject = JsonUtil.getJsonObjectFromString(this.mBcrypt);

                if (jsonObject == null) {
                    jsonObject = new JsonObject();
                }
            }

            jsonObject.addProperty(salt, bcrypt);

            this.mBcrypt = jsonObject.toString();
        }
    }

    public String getPublicKey() {
        synchronized (this) {
            return mPublicKey;
        }
    }

    public void setPublicKey(String publicKey) {
        synchronized (this) {
            this.mPublicKey = publicKey;
        }
    }

    public Long getTimestamp() {
        synchronized (this) {
            return mTimestamp;
        }
    }

    public void setTimestamp(Long timestamp) {
        synchronized (this) {
            this.mTimestamp = timestamp;
        }
    }

    public Long getLastKnownRowId() {
        synchronized (this) {
            return mLastKnownRowId;
        }
    }

    public void setLastKnownRowId(Long lastKnownRowId) {
        synchronized (this) {
            this.mLastKnownRowId = lastKnownRowId;
        }
    }

    public boolean getIsHidden() {
        synchronized (this) {
            return mIsHidden != null ? mIsHidden : false;
        }
    }

    public void setIsHidden(Boolean isHidden) {
        synchronized (this) {
            this.mIsHidden = isHidden;
        }
    }

    public boolean getIsFirstContact() {
        synchronized (this) {
            return mIsFirstContact == null ? true : mIsFirstContact;
        }
    }

    public void setIsFirstContact(Boolean isFirstContact) {
        synchronized (this) {
            this.mIsFirstContact = isFirstContact;
        }
    }

    public Boolean getIsBlocked() {
        synchronized (this) {
            return mIsBlocked;
        }
    }

    public void setIsBlocked(Boolean isBlocked) {
        synchronized (this) {
            this.mIsBlocked = isBlocked;
        }
    }

    private Boolean getIsReadOnly() {
        synchronized (this) {
            return mIsReadonly;
        }
    }

    public void setIsReadOnly(Boolean isReadOnly) {
        synchronized (this) {
            this.mIsReadonly = isReadOnly;
        }
    }

    public Boolean getIsSimsMeContact() {
        synchronized (this) {
            return mIsSimsMeContact;
        }
    }

    public void setIsSimsMeContact(Boolean isSimsMeContact) {
        synchronized (this) {
            this.mIsSimsMeContact = isSimsMeContact;
        }
    }

    public boolean getIsSimsMeContactSave() {
        synchronized (this) {
            return mIsSimsMeContact != null ? mIsSimsMeContact : false;
        }
    }

    public byte[] getEncryptedData() {
        synchronized (this) {
            if (mEncryptedData != null) {
                return mEncryptedData.clone();
            } else {
                return null;
            }
        }
    }

    public void setEncryptedData(byte[] encryptedData) {
        synchronized (this) {
            if (encryptedData != null) {
                this.mEncryptedData = encryptedData.clone();
            }
        }
    }

    public byte[] getIv() {
        synchronized (this) {
            if (mIv != null) {
                return mIv.clone();
            } else {
                return null;
            }
        }
    }

    public void setIv(byte[] iv) {
        synchronized (this) {
            if (iv != null) {
                this.mIv = iv.clone();
            }
        }
    }

    public String getChecksum() {
        return mChecksum;
    }

    public void setChecksum(String checksum) {
        this.mChecksum = checksum;
    }

    public String getAttributes() {
        return mAttributes;
    }

    public void setAttributes(String attributes) {
        this.mAttributes = attributes;

        if (!StringUtil.isNullOrEmpty(mAttributes)) {
            mAttributesJO = JsonUtil.getJsonObjectFromString(mAttributes);
        }
    }

    public Long getVersion() {
        return mVersion == null ? VERSION_OLD_CONTACT : mVersion;
    }

    public void setVersion(Long version) {
        this.mVersion = version;
    }

    /**
     * @return {@link #CLASS_PRIVATE_ENTRY}, {@link #CLASS_COMPANY_ENTRY}, {@link #CLASS_DOMAIN_ENTRY}, {@link #CLASS_OWN_ACCOUNT_ENTRY} oder null
     */
    @Nullable
    public String getClassEntryName()
            throws LocalizedException {
        return (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.CLASS);
    }

    /**
     * @param classEntryName {@link #CLASS_PRIVATE_ENTRY}, {@link #CLASS_COMPANY_ENTRY}, {@link #CLASS_DOMAIN_ENTRY}, {@link #CLASS_OWN_ACCOUNT_ENTRY}
     */
    public void setClassEntryName(@NonNull final String classEntryName)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.CLASS, classEntryName);
    }

    @Nullable
    public String getDomain()
            throws LocalizedException {
        return (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.DOMAIN);
    }

    public void setDomain(final String emailDomain)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.DOMAIN, emailDomain);
    }

    @Nullable
    public String getEmail()
            throws LocalizedException {
        return (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.EMAIL);
    }

    public void setEmail(final String email)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.EMAIL, email);
    }

    @Nullable
    public String getDepartment()
            throws LocalizedException {
        return (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.DEPARTMENT);
    }

    public void setDepartment(final String department)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.DEPARTMENT, department);
    }

    @Nullable
    public String getPrivateIndexGuid()
            throws LocalizedException {
        return (String) GreenDAOSecurityLayer.getInstance().get(this, JsonConstants.GUID);
    }

    public void setPrivateIndexGuid(final String guid)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.GUID, guid);
    }

    public JsonObject exportPrivateIndexEntryData()
            throws LocalizedException {
        JsonObject privateIndexEntryJO = new JsonObject();

        addEncryptedAttributeToJO(JsonConstants.CLASS, privateIndexEntryJO);

        addTrustStateToJO(privateIndexEntryJO);

        privateIndexEntryJO.addProperty(JsonConstants.DELETED, isDeletedHidden()
                ? JsonConstants.VALUE_TRUE : JsonConstants.VALUE_FALSE);

        addConfirmedStateToJO(privateIndexEntryJO);

        addEncryptedAttributeToJO(JsonConstants.ACCOUNT_ID, privateIndexEntryJO);

        privateIndexEntryJO.addProperty(JsonConstants.ACCOUNT_GUID, this.getAccountGuid());

        String pubKey = getPublicKey();
        if (!StringUtil.isNullOrEmpty(pubKey)) {
            privateIndexEntryJO.addProperty(JsonConstants.PUBLIC_KEY, pubKey);
        }

        String profileKey = getProfileInfoAesKey();
        if (!StringUtil.isNullOrEmpty(profileKey)) {
            privateIndexEntryJO.addProperty(JsonConstants.PROFILE_KEY, profileKey);
        }

        String mandant = getMandant();
        if (!StringUtil.isNullOrEmpty(mandant)) {
            privateIndexEntryJO.addProperty(JsonConstants.MANDANT, mandant);
        }

        addEncryptedAttributeToJO(JsonConstants.EMAIL, privateIndexEntryJO);

        String phone = getPhoneNumber();
        if (!StringUtil.isNullOrEmpty(phone)) {
            privateIndexEntryJO.addProperty(JsonConstants.PHONE, phone);
        }

        String name = getLastName();
        if (!StringUtil.isNullOrEmpty(name)) {
            privateIndexEntryJO.addProperty(JsonConstants.NAME, name);
        }

        String firstName = getFirstName();
        if (!StringUtil.isNullOrEmpty(firstName)) {
            privateIndexEntryJO.addProperty(JsonConstants.FIRSTNAME, firstName);
        }

        String nickname = getNickname();
        if (!StringUtil.isNullOrEmpty(nickname)) {
            privateIndexEntryJO.addProperty(JsonConstants.NICKNAME, nickname);
        }

        String statusText = getStatusText();
        if (!StringUtil.isNullOrEmpty(statusText)) {
            privateIndexEntryJO.addProperty(JsonConstants.STATE, statusText);
        }

        //eigener Kontakt kann domain haben
        String domain = getDomain();
        if (!StringUtil.isNullOrEmpty(domain)) {
            privateIndexEntryJO.addProperty(JsonConstants.DOMAIN, domain);
        }

        addEncryptedAttributeToJO(JsonConstants.DEPARTMENT, privateIndexEntryJO);
        addEncryptedAttributeToJO(JsonConstants.FAVORITE, privateIndexEntryJO);

        privateIndexEntryJO.addProperty(JsonConstants.VISIBLE, getIsHidden()
                ? JsonConstants.VALUE_FALSE : JsonConstants.VALUE_TRUE);

        final String oooStatus = getOooStatus();
        if (!StringUtil.isNullOrEmpty(oooStatus)) {
            final JsonObject jsonObjectFromString = JsonUtil.getJsonObjectFromString(oooStatus);
            if (jsonObjectFromString != null) {
                privateIndexEntryJO.add(JsonConstants.OOO_STATUS, jsonObjectFromString);
            }
        }

        return privateIndexEntryJO;
    }

    public boolean importPrivateIndexEntryData(final String privateIndexGuid, final JsonObject privateIndexEntryJO)
            throws LocalizedException {
        boolean hasChangesForFtsDb = false;
        GreenDAOSecurityLayer.getInstance().set(this, JsonConstants.GUID, privateIndexGuid);

        setEncryptedAttribute(JsonConstants.CLASS, privateIndexEntryJO);
        LogUtil.e(this.getClass().getSimpleName(), "DisableChatInput -> importPrivateIndexEntryData -> private index guid: " + privateIndexGuid);
        hasChangesForFtsDb = setTrustState(privateIndexEntryJO);

        String value = JsonUtil.stringFromJO(JsonConstants.DELETED, privateIndexEntryJO);
        setIsDeletedHidden(!StringUtil.isNullOrEmpty(value) && StringUtil.isEqual(value, JsonConstants.VALUE_TRUE));

        setConfirmedState(privateIndexEntryJO);

        setEncryptedAttribute(JsonConstants.ACCOUNT_ID, privateIndexEntryJO);

        value = JsonUtil.stringFromJO(JsonConstants.PUBLIC_KEY, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setPublicKey(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.PROFILE_KEY, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setProfileInfoAesKey(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.MANDANT, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setMandant(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.PHONE, privateIndexEntryJO);
        if (!StringUtil.isEqual(value, getPhoneNumber())) {
            setPhoneNumber(value);
            hasChangesForFtsDb = true;
        }

        value = JsonUtil.stringFromJO(JsonConstants.EMAIL, privateIndexEntryJO);
        if (!StringUtil.isEqual(value, getEmail())) {
            setEmail(value);
            hasChangesForFtsDb = true;
        }

        value = JsonUtil.stringFromJO(JsonConstants.NAME, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value) && !StringUtil.isEqual(value, getLastName())) {
            setLastName(value);
            hasChangesForFtsDb = true;
        }

        value = JsonUtil.stringFromJO(JsonConstants.FIRSTNAME, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value) && !StringUtil.isEqual(value, getFirstName())) {
            setFirstName(value);
            hasChangesForFtsDb = true;
        }

        value = JsonUtil.stringFromJO(JsonConstants.NICKNAME, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setNickname(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.STATE, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setStatusText(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.DOMAIN, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setDomain(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.OOO_STATUS, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            setOooStatus(value);
        }

        value = JsonUtil.stringFromJO(JsonConstants.DEPARTMENT, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value) && !StringUtil.isEqual(value, getDepartment())) {
            setDepartment(value);
            hasChangesForFtsDb = true;
        }

        setEncryptedAttribute(JsonConstants.FAVORITE, privateIndexEntryJO);

        value = JsonUtil.stringFromJO(JsonConstants.VISIBLE, privateIndexEntryJO);
        setIsHidden(StringUtil.isNullOrEmpty(value) || !StringUtil.isEqual(value, JsonConstants.VALUE_TRUE));

        setIsSimsMeContact(true);

        return hasChangesForFtsDb;
    }

    private void setEncryptedAttribute(@NonNull final String key, @NonNull final JsonObject privateIndexEntryJO)
            throws LocalizedException {
        String value = JsonUtil.stringFromJO(key, privateIndexEntryJO);
        if (!StringUtil.isNullOrEmpty(value)) {
            GreenDAOSecurityLayer.getInstance().set(this, key, value);
        }
    }

    private void addEncryptedAttributeToJO(@NonNull final String key, @NonNull final JsonObject privateIndexEntryJO)
            throws LocalizedException {
        String value = (String) GreenDAOSecurityLayer.getInstance().get(this, key);

        if (!StringUtil.isNullOrEmpty(value)) {
            privateIndexEntryJO.addProperty(key, value);
        }
    }

    private boolean setTrustState(@NonNull final JsonObject privateIndexEntryJO)
            throws LocalizedException {
        boolean hasChanges = false;

        Integer oldState = getState();
        if (oldState == null) {
            oldState = 0;
        }

        String trustState = JsonUtil.stringFromJO(JsonConstants.TRUST_STATE, privateIndexEntryJO);
        if (StringUtil.isNullOrEmpty(trustState)) {
            if (oldState != STATE_UNSIMSABLE) {
                hasChanges = true;
                setState(STATE_UNSIMSABLE);
            }
            return hasChanges;
        }

        switch (trustState) {
            case TRUST_STATE_LOW: {
                if (oldState != STATE_LOW_TRUST) {
                    hasChanges = true;
                    setState(STATE_LOW_TRUST);
                }
                break;
            }
            case TRUST_STATE_MEDIUM: {
                if (oldState != STATE_MIDDLE_TRUST) {
                    hasChanges = true;
                    setState(STATE_MIDDLE_TRUST);
                }
                break;
            }
            case TRUST_STATE_HIGH: {
                if (oldState != STATE_HIGH_TRUST) {
                    hasChanges = true;
                    setState(STATE_HIGH_TRUST);
                }
                break;
            }
            case TRUST_STATE_NONE:
            default: {
                if (oldState != STATE_UNSIMSABLE) {
                    hasChanges = true;
                    setState(STATE_UNSIMSABLE);
                }
            }
        }

        return hasChanges;
    }

    private void addTrustStateToJO(@NonNull final JsonObject privateIndexEntryJO)
            throws LocalizedException {
        switch (getState()) {
            case STATE_LOW_TRUST: {
                privateIndexEntryJO.addProperty(JsonConstants.TRUST_STATE, TRUST_STATE_LOW);
                break;
            }
            case STATE_MIDDLE_TRUST: {
                privateIndexEntryJO.addProperty(JsonConstants.TRUST_STATE, TRUST_STATE_MEDIUM);
                break;
            }
            case STATE_HIGH_TRUST: {
                privateIndexEntryJO.addProperty(JsonConstants.TRUST_STATE, TRUST_STATE_HIGH);
                break;
            }
            case STATE_UNSIMSABLE:
            default: {
                privateIndexEntryJO.addProperty(JsonConstants.TRUST_STATE, TRUST_STATE_NONE);
            }
        }
    }

    public void setConfirmedState(@NonNull final JsonObject privateIndexEntryJO) {
        String value = JsonUtil.stringFromJO(JsonConstants.CONFIRMED, privateIndexEntryJO);

        if (StringUtil.isNullOrEmpty(value)) {
            value = CONFIRMED_STATE_UNCONFIRMED;
        }

        switch (value) {
            case CONFIRMED_STATE_CONFIRMED: {
                setIsFirstContact(false);
                setIsBlocked(false);
                break;
            }
            case CONFIRMED_STATE_BLOCKED: {
                setIsFirstContact(false);
                setIsBlocked(true);
                break;
            }
            case CONFIRMED_STATE_UNCONFIRMED:
            default: {
                setIsFirstContact(true);
                setIsBlocked(false);
            }
        }
    }

    public void addConfirmedStateToJO(@NonNull final JsonObject privateIndexEntryJO)
            throws LocalizedException {
        String value;
        if (CLASS_COMPANY_ENTRY.equals(getClassEntryName())
                || CLASS_DOMAIN_ENTRY.equals(getClassEntryName())) {
            value = CONFIRMED_STATE_CONFIRMED;
        } else if (getIsFirstContact()) {
            value = CONFIRMED_STATE_UNCONFIRMED;
        } else if (getIsBlocked() != null && getIsBlocked()) {
            value = CONFIRMED_STATE_BLOCKED;
        } else {
            value = CONFIRMED_STATE_CONFIRMED;
        }

        privateIndexEntryJO.addProperty(JsonConstants.CONFIRMED, value);
    }

    /**
     * getLastOnlineTime
     *
     * @return
     */
    public Long getLastOnlineTime() {

        return mLastOnlineTime;
    }

    /**
     * setLastOnlineTime
     *
     * @param lastOnlineTime
     */
    public void setLastOnlineTime(final Long lastOnlineTime) {
        mLastOnlineTime = lastOnlineTime;
    }

    public boolean getTempReadonly() {
        if (mTempReadonly == null) {
            return false;
        }
        return mTempReadonly.booleanValue();
    }

    public void setTempReadonly(boolean readOnly) {
        mTempReadonly = Boolean.valueOf(readOnly);
    }

    /**
     * stummgeshclatet bis
     *
     * @return
     * @throws LocalizedException
     */
    public long getSilentTill()
            throws LocalizedException {
        final Object tmp = GreenDAOSecurityLayer.getInstance().get(this, SILENT_TILL);

        if (tmp instanceof Long) {
            return (long) tmp;
        }
        return (long) 0;
    }

    /**
     * stummschlaten bis
     *
     * @param silentTill
     * @throws LocalizedException
     */
    public void setSilentTill(final long silentTill)
            throws LocalizedException {
        GreenDAOSecurityLayer.getInstance().set(this, SILENT_TILL, silentTill);
    }

    // KEEP METHODS END
}
