// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import androidx.annotation.NonNull;
import android.util.Base64;
import com.google.gson.*;
import eu.ginlo_apps.ginlo.exception.LocalizedException;
import eu.ginlo_apps.ginlo.greendao.Contact;
import eu.ginlo_apps.ginlo.log.LogUtil;
import eu.ginlo_apps.ginlo.model.constant.Encoding;
import eu.ginlo_apps.ginlo.util.*;

import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import java.io.UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Locale;

// THIS CODE IS GENERATED BY SGA, EDIT WHATEVER YOU WANT

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table CONTACT.
 */
public class CompanyContact
        implements java.io.Serializable,
        Comparable<CompanyContact> {

    public static final String COMPANY_CONTACT_FIRSTNAME = "firstname";

    public static final String COMPANY_CONTACT_LASTNAME = "name";

    public static final String COMPANY_CONTACT_EMAIL = "email";

    public static final String COMPANY_CONTACT_PHONE = "phone";

    public static final String COMPANY_CONTACT_DEPARTMENT = "department";

    private static final String COMPANY_CONTACT_ADDRESS_INFO_V1 = "AdressInformation-v1";

    private Long mId;

    private String mAccountGuid;

    private String mChecksum;

    private String mKeyIv;

    private byte[] mEncryptedData;

    private String mFirstName;

    private String mLastName;

    private String mEmailAddress;

    private String mPhonenumer;

    private String mDepartment;

    private String mPublicKey;

    private String mGuid;

    private String mClassType;

    private String mAccountId;

    // KEEP FIELDS END

    public CompanyContact() {
    }

    public CompanyContact(final Long id) {
        this.mId = id;
    }

    public CompanyContact(final Long id,
                          final String accountGuid,
                          final String checksum,
                          final String keyIv,
                          final byte[] encryptedData,
                          final String publicKey,
                          final String guid,
                          final String accountId
    ) {
        this.mId = id;
        this.mAccountGuid = accountGuid;
        this.mChecksum = checksum;
        this.mKeyIv = keyIv;
        if (encryptedData != null) {
            this.mEncryptedData = encryptedData.clone();
        }
        this.mPublicKey = publicKey;
        this.mGuid = guid;
        this.mAccountId = accountId;
    }

    public String getChecksum() {
        return mChecksum;
    }

    public void setChecksum(final String checksum) {
        this.mChecksum = checksum;
    }

    public String getKeyIv() {
        return mKeyIv;
    }

    public void setKeyIv(final String keyIv) {
        this.mKeyIv = keyIv;
    }

    public String getPublicKey() {
        return mPublicKey;
    }

    public void setPublicKey(final String publicKey) {
        this.mPublicKey = publicKey;
    }

    public byte[] getEncryptedData() {
        synchronized (this) {
            if (mEncryptedData != null) {
                return mEncryptedData.clone();
            } else {
                return null;
            }
        }
    }

    public void setEncryptedData(final byte[] encryptedData) {
        synchronized (this) {
            if (encryptedData != null) {
                this.mEncryptedData = encryptedData.clone();
            }
        }
    }

    @Override
    public int hashCode() {
        synchronized (this) {
            String str = this.getClass().getName() + "-" + getId();

            return str.hashCode();
        }
    }

    /**
     * equals
     *
     * @param other other obj
     * @return id1 == id2
     */
    @Override
    public boolean equals(Object other) {
        if (!(other instanceof CompanyContact))
        {
            return false;
        }
        Long id1 = getId();
        Long id2 = ((CompanyContact) other).getId();
        if (id1 == null || id2 == null) {
            return ((id1 != null) == (id2 != null));
        }
        return (id1.longValue() == id2.longValue());
    }

    /**
     * custom attribut entschluesseln
     *
     * @param key       domainkey mit dme das att vershcluesselt ist
     * @param attribute attributname
     * @return attributwert
     */
    public String getEncryptedAttribute(final SecretKey key, final String attribute) {
        synchronized (this) {
            switch (attribute) {
                case COMPANY_CONTACT_FIRSTNAME: {
                    if (mFirstName == null) {
                        decryptData(key);
                    }
                    return mFirstName;
                }
                case COMPANY_CONTACT_LASTNAME: {
                    if (mLastName == null) {
                        decryptData(key);
                    }
                    return mLastName;
                }
                case COMPANY_CONTACT_EMAIL: {
                    if (mEmailAddress == null) {
                        decryptData(key);
                    }
                    return mEmailAddress;
                }
                case COMPANY_CONTACT_PHONE: {
                    if (mPhonenumer == null) {
                        decryptData(key);
                    }
                    return mPhonenumer;
                }
                case COMPANY_CONTACT_DEPARTMENT: {
                    if (mDepartment == null) {
                        decryptData(key);
                    }
                    return mDepartment;
                }

                default:
                    return null;
            }
        }
    }

    private void decryptData(final SecretKey key) {
        synchronized (this) {
            try {
                final IvParameterSpec iv = new IvParameterSpec(Base64.decode(mKeyIv, Base64.NO_WRAP));

                final byte[] decryptedData = SecurityUtil.decryptMessageWithAES(Base64.decode(mEncryptedData, Base64.NO_WRAP), key, iv);

                final String dataString = new String(decryptedData, StandardCharsets.UTF_8);

                final JsonElement jsonElement = new JsonParser().parse(dataString);

                if (jsonElement != null) {
                    final JsonObject jsonObject = jsonElement.getAsJsonObject();
                    if (jsonObject != null) {
                        if (jsonObject.has(COMPANY_CONTACT_ADDRESS_INFO_V1)) {
                            final JsonObject addInfoObj = jsonObject.get(COMPANY_CONTACT_ADDRESS_INFO_V1).getAsJsonObject();

                            if (addInfoObj != null) {
                                String firstName = JsonUtil.stringFromJO(COMPANY_CONTACT_FIRSTNAME, addInfoObj);
                                mFirstName = !StringUtil.isNullOrEmpty(firstName) ? firstName : "";

                                String lastName = JsonUtil.stringFromJO(COMPANY_CONTACT_LASTNAME, addInfoObj);
                                mLastName = !StringUtil.isNullOrEmpty(lastName) ? lastName : "";

                                String phone = JsonUtil.stringFromJO(COMPANY_CONTACT_PHONE, addInfoObj);
                                mPhonenumer = !StringUtil.isNullOrEmpty(phone) ? phone : "";

                                String eMail = JsonUtil.stringFromJO(COMPANY_CONTACT_EMAIL, addInfoObj);
                                mEmailAddress = !StringUtil.isNullOrEmpty(eMail) ? eMail : "";

                                String department = JsonUtil.stringFromJO(COMPANY_CONTACT_DEPARTMENT, addInfoObj);
                                mDepartment = !StringUtil.isNullOrEmpty(department) ? department : "";
                            }
                        }
                    }
                }
            } catch (LocalizedException | JsonSyntaxException | JsonIOException e) {
                LogUtil.e(this.getClass().getSimpleName(), e.toString(), e);
            }
        }
    }

    @Override
    public String toString() {
        //(fpl) Bitte keine aufrufe hier tätigen die zu einer entschlüsselung führt. z.b. getname()
        return "CompanyContact (ID: " + getId() + " )";
    }

    @Override
    public int compareTo(@NonNull final CompanyContact aCompanyContact) {
        if ((aCompanyContact.getId() == null) && (this.getId() == null)) {
            return 0;
        } else if ((aCompanyContact.getId() == null) && (this.getId() != null)) {
            return -1;
        } else if ((aCompanyContact.getId() != null) && (this.getId() == null)) {
            return 1;
        } else if (aCompanyContact.getId() < this.getId()) {
            return -1;
        } else if (aCompanyContact.getId() > this.getId()) {
            return 1;
        } else {
            return 0;
        }
    }

    public Long getId() {
        synchronized (this) {
            return mId;
        }
    }

    public void setId(final Long id) {
        synchronized (this) {
            this.mId = id;
        }
    }

    public String getAccountGuid() {
        synchronized (this) {
            return mAccountGuid;
        }
    }

    public void setAccountGuid(final String accountGuid) {
        synchronized (this) {
            this.mAccountGuid = accountGuid;
        }
    }

    public String getGuid() {
        synchronized (this) {
            return mGuid;
        }
    }

    public void setGuid(final String guid) {
        synchronized (this) {
            this.mGuid = guid;
        }
    }

    public String getAccountId() {
        synchronized (this) {
            return mAccountId;
        }
    }

    public void setAccountId(final String accountId) {
        synchronized (this) {
            this.mAccountId = accountId;
        }
    }

    /**
     * @throws LocalizedException [!EXC_DESCRIPTION!]
     */
    public boolean findString(final String name)
            throws LocalizedException {
        synchronized (this) {
            final String searchString = name.toLowerCase(Locale.US);

            if (mFirstName != null) {
                if (mFirstName.toLowerCase(Locale.US).contains(searchString)) {
                    return true;
                }
            }
            if (mLastName != null) {
                if (mLastName.toLowerCase(Locale.US).contains(searchString)) {
                    return true;
                }
            }
            if (mEmailAddress != null) {
                if (mEmailAddress.toLowerCase(Locale.US).contains(searchString)) {
                    return true;
                }
            }
            if (mPhonenumer != null) {
                if (mPhonenumer.toLowerCase(Locale.US).contains(searchString)) {
                    return true;
                }
            }
            if (mDepartment != null) {
                if (mDepartment.toLowerCase(Locale.US).contains(searchString)) {
                    return true;
                }
            }
            return mAccountId != null && mAccountId.toLowerCase(Locale.US).contains(searchString);
        }
    }

    public String getClassType() {
        synchronized (this) {
            if (!StringUtil.isNullOrEmpty(mClassType)) {
                return mClassType;
            }

            mClassType = mGuid != null && mGuid.startsWith(GuidUtil.COMPANY_INDEX_ENTRY_GUID_PREFIX) ? eu.ginlo_apps.ginlo.greendao.Contact.CLASS_COMPANY_ENTRY : Contact.CLASS_DOMAIN_ENTRY;

            return mClassType;
        }
    }

    // KEEP METHODS END
}
