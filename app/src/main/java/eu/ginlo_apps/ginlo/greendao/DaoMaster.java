// Copyright (c) 2020-2022 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.util.Log;
import org.greenrobot.greendao.AbstractDaoMaster;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseOpenHelper;
import org.greenrobot.greendao.identityscope.IdentityScopeType;

import eu.ginlo_apps.ginlo.greendao.AccountDao;
import eu.ginlo_apps.ginlo.greendao.ChannelCategoryDao;
import eu.ginlo_apps.ginlo.greendao.ChannelDao;
import eu.ginlo_apps.ginlo.greendao.ChatDao;
import eu.ginlo_apps.ginlo.greendao.CompanyContactDao;
import eu.ginlo_apps.ginlo.greendao.ContactDao;
import eu.ginlo_apps.ginlo.greendao.DaoSession;
import eu.ginlo_apps.ginlo.greendao.DeviceDao;
import eu.ginlo_apps.ginlo.greendao.MessageDao;
import eu.ginlo_apps.ginlo.greendao.NewDestructionDateDao;
import eu.ginlo_apps.ginlo.greendao.NotificationDao;
import eu.ginlo_apps.ginlo.greendao.PreferenceDao;
import eu.ginlo_apps.ginlo.greendao.ProductDao;
import eu.ginlo_apps.ginlo.greendao.StatusTextDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Doch!

/**
 * Master of DAO (schema version 64): knows all DAOs.
 */
public class DaoMaster
        extends AbstractDaoMaster {

    public static final int SCHEMA_VERSION = 79;

    public DaoMaster(Database db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(PreferenceDao.class);
        registerDaoClass(AccountDao.class);
        registerDaoClass(ContactDao.class);
        registerDaoClass(CompanyContactDao.class);
        registerDaoClass(MessageDao.class);
        registerDaoClass(eu.ginlo_apps.ginlo.greendao.ChatDao.class);
        registerDaoClass(ProductDao.class);
        registerDaoClass(StatusTextDao.class);
        registerDaoClass(NewDestructionDateDao.class);
        registerDaoClass(ChannelDao.class);
        registerDaoClass(ChannelCategoryDao.class);
        registerDaoClass(DeviceDao.class);
        registerDaoClass(NotificationDao.class);
    }

    /**
     * Creates underlying database table using DAOs.
     */
    public static void createAllTables(Database db,
                                       boolean ifNotExists) {
        PreferenceDao.createTable(db, ifNotExists);
        AccountDao.createTable(db, ifNotExists);
        ContactDao.createTable(db, ifNotExists);
        CompanyContactDao.createTable(db, ifNotExists);
        MessageDao.createTable(db, ifNotExists);
        eu.ginlo_apps.ginlo.greendao.ChatDao.createTable(db, ifNotExists);
        ProductDao.createTable(db, ifNotExists);
        StatusTextDao.createTable(db, ifNotExists);
        NewDestructionDateDao.createTable(db, ifNotExists);
        ChannelDao.createTable(db, ifNotExists);
        ChannelCategoryDao.createTable(db, ifNotExists);
        DeviceDao.createTable(db, ifNotExists);
        NotificationDao.createTable(db, ifNotExists);
    }

    /**
     * Drops underlying database table using DAOs.
     */
    public static void dropAllTables(SQLiteDatabase db,
                                     boolean ifExists) {
        PreferenceDao.dropTable(db, ifExists);
        AccountDao.dropTable(db, ifExists);
        ContactDao.dropTable(db, ifExists);
        CompanyContactDao.dropTable(db, ifExists);
        MessageDao.dropTable(db, ifExists);
        ChatDao.dropTable(db, ifExists);
        ProductDao.dropTable(db, ifExists);
        StatusTextDao.dropTable(db, ifExists);
        NewDestructionDateDao.dropTable(db, ifExists);
        ChannelDao.dropTable(db, ifExists);
        ChannelCategoryDao.dropTable(db, ifExists);
        DeviceDao.dropTable(db, ifExists);
        NotificationDao.dropTable(db, ifExists);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

    /**
     * @author SGA
     * @version $Revision$, $Date$, $Author$
     */
    public abstract static class OpenHelper
            extends DatabaseOpenHelper {

        OpenHelper(Context context,
                   String name,
                   CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(Database db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
}
