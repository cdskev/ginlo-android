// Copyright (c) 2020-2021 ginlo.net GmbH

package eu.ginlo_apps.ginlo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import eu.ginlo_apps.ginlo.greendao.NewDestructionDate;
import eu.ginlo_apps.ginlo.model.constant.NumberConstants;
import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NEW_DESTRUCTION_DATE.
 */
public class NewDestructionDateDao
        extends AbstractDao<eu.ginlo_apps.ginlo.greendao.NewDestructionDate, Long> {

    public static final String TABLENAME = "NEW_DESTRUCTION_DATE";

    public NewDestructionDateDao(DaoConfig config) {
        super(config);
    }

    public NewDestructionDateDao(DaoConfig config,
                                 AbstractDaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db,
                                   boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";

        db.execSQL("CREATE TABLE " + constraint + "'NEW_DESTRUCTION_DATE' ("  //
                + "'_id' INTEGER PRIMARY KEY ,"  // 0: id
                + "'GUID' TEXT,"  // 1: guid
                + "'NEW_DESTRUCTION_DATE' INTEGER);");  // 2: newDestructionDate
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db,
                                 boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NEW_DESTRUCTION_DATE'";

        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt,
                              eu.ginlo_apps.ginlo.greendao.NewDestructionDate entity) {
        stmt.clearBindings();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String guid = entity.getGuid();

        if (guid != null) {
            stmt.bindString(NumberConstants.INT_2, guid);
        }

        Long newDestructionDate = entity.getNewDestructionDate();

        if (newDestructionDate != null) {
            stmt.bindLong(NumberConstants.INT_3, newDestructionDate);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor,
                        int offset) {
        return cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public eu.ginlo_apps.ginlo.greendao.NewDestructionDate readEntity(Cursor cursor,
                                                                     int offset) {

        return new eu.ginlo_apps.ginlo.greendao.NewDestructionDate(  //
                cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0),  // id
                cursor.isNull(offset + NumberConstants.INT_1) ? null
                        : cursor.getString(offset + NumberConstants.INT_1),  // guid
                cursor.isNull(offset + NumberConstants.INT_2)
                        ? null : cursor.getLong(offset + NumberConstants.INT_2)  // newDestructionDate
        );
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor,
                           eu.ginlo_apps.ginlo.greendao.NewDestructionDate entity,
                           int offset) {
        entity.setId(cursor.isNull(offset + NumberConstants.INT_0) ? null : cursor.getLong(offset + NumberConstants.INT_0));
        entity.setGuid(cursor.isNull(offset + NumberConstants.INT_1) ? null : cursor.getString(offset + NumberConstants.INT_1));
        entity.setNewDestructionDate(cursor.isNull(offset + NumberConstants.INT_2) ? null : cursor.getLong(offset + NumberConstants.INT_2));
    }

    @Override
    protected void bindValues(DatabaseStatement stmt, eu.ginlo_apps.ginlo.greendao.NewDestructionDate entity) {
        stmt.clearBindings();

        Long id = entity.getId();

        if (id != null) {
            stmt.bindLong(NumberConstants.INT_1, id);
        }

        String guid = entity.getGuid();

        if (guid != null) {
            stmt.bindString(NumberConstants.INT_2, guid);
        }

        Long newDestructionDate = entity.getNewDestructionDate();

        if (newDestructionDate != null) {
            stmt.bindLong(NumberConstants.INT_3, newDestructionDate);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(eu.ginlo_apps.ginlo.greendao.NewDestructionDate entity,
                                        long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(eu.ginlo_apps.ginlo.greendao.NewDestructionDate entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected boolean hasKey(NewDestructionDate entity) {
        if (entity != null && entity.getId() != null) {
            return true;
        }
        return false;
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity NewDestructionDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {

        public static final Property Id = new Property(NumberConstants.INT_0, Long.class, "id", true, "_id");

        public static final Property Guid = new Property(NumberConstants.INT_1, String.class, "guid", false, "GUID");

        public static final Property NewDestructionDate = new Property(NumberConstants.INT_2, Long.class, "newDestructionDate", false,
                "NEW_DESTRUCTION_DATE");
    }
}
